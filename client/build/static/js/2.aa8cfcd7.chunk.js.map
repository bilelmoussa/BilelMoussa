{"version":3,"sources":["../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/findNumbers/LRUCache.js","../node_modules/libphonenumber-js/es6/findNumbers/RegExpCache.js","../node_modules/libphonenumber-js/es6/findNumbers/util.js","../node_modules/libphonenumber-js/es6/findNumbers/utf-8.js","../node_modules/libphonenumber-js/es6/findNumbers/Leniency.js","../node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js","../node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js","../node_modules/libphonenumber-js/es6/findNumbers.js","../node_modules/libphonenumber-js/es6/findNumbers_.js","../node_modules/libphonenumber-js/es6/searchNumbers.js","../node_modules/libphonenumber-js/es6/getCountries.js","../node_modules/libphonenumber-js/es6/getExampleNumber.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../node_modules/libphonenumber-js/core/index.js","../node_modules/classnames/index.js","../node_modules/input-format/modules/input control.js","../node_modules/libphonenumber-js/es6/getNumberType_.js","../node_modules/libphonenumber-js/es6/util.js","../node_modules/libphonenumber-js/es6/RFC3966.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/parseDigits.js","../node_modules/input-format/modules/parse.js","../node_modules/react-phone-number-input/index.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/extension.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/template formatter.js","../node_modules/react-phone-number-input/modules/InternationalIcon.js","../node_modules/react-phone-number-input/modules/PhoneInput.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/IDD.js","../node_modules/input-format/index.js","../node_modules/input-format/modules/ReactInput.js","../node_modules/input-format/modules/helpers.js","../node_modules/react-phone-number-input/modules/PhoneInputNativeDefaultMetadata.js","../node_modules/react-phone-number-input/modules/PropTypes.js","../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","../node_modules/react-phone-number-input/modules/countries.js","../node_modules/react-phone-number-input/modules/libphonenumber/parsePhoneNumberDefaultMetadata.js","../node_modules/react-phone-number-input/modules/isValidPhoneNumberDefaultMetadata.js","../node_modules/react-phone-number-input/international-icon/index.js","../node_modules/@material-ui/core/esm/Typography/Typography.js","../node_modules/@material-ui/core/esm/ListItem/ListItem.js","../node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/close braces.js","../node_modules/input-format/modules/dom.js","../node_modules/react-phone-number-input/modules/PhoneInputNativeDefaults.js","../node_modules/react-phone-number-input/modules/PhoneInputNative.js","../node_modules/react-phone-number-input/modules/InputBasic.js","../node_modules/react-phone-number-input/modules/Flag.js","../node_modules/react-phone-number-input/modules/input-control.js","../node_modules/react-phone-number-input/modules/CountrySelectNative.js","../node_modules/react-phone-number-input/modules/libphonenumber/parsePhoneNumber.js","../node_modules/react-phone-number-input/modules/isValidPhoneNumber.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js"],"names":["MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","parsePhoneNumber","text","options","metadata","v2","_typeof","Symbol","iterator","obj","constructor","_slicedToArray","arr","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","sliceIterator","TypeError","_normalizeArguments","normalizeArguments","args","_Array$prototype$slic","slice","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","Error","defaultCountry","_","error","ParseError","parsePhoneNumberFromString","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","_classCallCheck","instance","Node","prev","this","LRUCache","limit","size","head","tail","cache","ensureLimit","node","remove","put","console","log","RegExpCache","pattern","regExp","get","RegExp","lower","upper","trimAfterFirstMatch","regexp","string","index","search","_pZ","pZ","_pL","pL_regexp","pSc_regexp","pMn_regexp","latinLetterRegexp","isLatinLetter","letter","test","isInvalidPunctuationSymbol","character","POSSIBLE","number","candidate","VALID","containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","substring","MatchType","NSN_MATCH","parseDigits","ext","_metadata","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","nationalNumber","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","indexOf","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","_iterator","_isArray","_ref","alternateFormat","leadingDigitsPatterns","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","split","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","SECOND_NUMBER_START_PATTERN","parsePreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","LEAD_CLASS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Number","Math","pow","PhoneNumberMatcher","state","searchIndex","leniency","extended","maxTries","Leniency","matches","exec","match","parseAndVerify","extractInnerMatch","phoneNumber","PhoneNumber","country","phone","startsAt","endsAt","isFirstMatch","possibleInnerMatch","_group","_match","group","previousChar","lastCharIndex","nextChar","isValidCandidate","possible","result","lastMatch","find","hasNext","matcher","results","searchNumbers","getCountries","getExampleNumber","examples","formatIncompletePhoneNumber","AsYouType","input","hasOwn","classNames","classes","arg","argType","inner","apply","join","module","exports","default","onCut","event","_parse","_format","on_change","setTimeout","format_input_text","onPaste","selection","_dom","getSelection","erase_selection","onChange","onKeyDown","operation","getOperation","preventDefault","_edit2","_interopRequireDefault","_parse4","_format3","__esModule","start","end","setCaretPosition","_parse2","getCaretPosition","caret","operation_applied","formatted","NON_FIXED_LINE_PHONE_TYPES","getNumberType","hasCountry","nationalNumberPattern","is_of_type","type","_type","possibleLengths","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","matchesEntirely","regular_expression","mergeArrays","a","b","merged","element","sort","parseRFC3966","replace","_part$split","_part$split2","name","formatRFC3966","_ref2","parseIncompletePhoneNumber","parsePhoneNumberCharacter","code","message","stack","create","countryCallingCode","isCountryCode","format","DIGITS","parseDigit","digit","caret_position","parse_character","focused_input_character_index","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","reset","extracted_number","processInput","currentOutput","parsedInput","resetCountriness","isInternational","determineTheCountry","extractCountryCallingCode","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","previous_national_prefix","nationalPrefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","carrierCode","resetCountry","available_formats","template","partially_populated_template","last_match_position","formats","filter","internationalFormat","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","_extractCountryCallin","chooseCountryByCountryCallingCode","selectedCountry","_strip_national_prefi","potential_national_number","isPossibleNumber","_iterator2","_isArray2","_i2","nationalPrefixIsMandatoryWhenFormatting","usesNationalPrefix","nationalPrefixIsOptionalWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","_ref3","cut_stripping_dangling_braces","nationalPrefixFormattingRule","cut_before_index","dangling_braces","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","strip_dangling_braces","times","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","_parse_input","extract_formatted_phone_number","with_extension_stripped","parse_input","formatted_phone_number","_parse_phone_number","default_country","_parse_national_numbe","national_number","carrier_code","strip_national_prefix_and_carrier_code","parse_national_number","exactCountry","find_country_code","parse_phone_number","valid","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","country_calling_code","national_phone_number","possible_countries","countryCallingCodes","leadingDigits","_find_country_code","numberWithoutIDD","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERN","extractExtension","number_without_extension","formatter","_templateFormatter2","found","possibly_last_input_character_index","_templateFormatter","placeholder","should_close_braces","characters_in_template","_helpers","count_occurences","value_character_index","filled_in_template","_closeBraces2","_closeBraces","_react2","createElement","xmlns","viewBox","stroke","fill","strokeWidth","strokeLinecap","d","x1","y1","x2","y2","_react","_class","_class2","_temp","_initialiseProps","_propTypes2","_classnames2","_reactLifecyclesCompat","_core","_InputBasic2","_Flag2","_PropTypes","_inputControl","_countries2","PureComponent","Component","PhoneNumberInput","polyfill","_PureComponent","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","_this$props","labels","international","_this$props2","countries","countryOptions","isCountrySupportedWithError","filterCountries","filterCountryOptions","pre_selected_country","getPreSelectedCountry","getCountryCodes","country_select_options","generateCountrySelectOptions","parsed_input","generateParsedInput","subClass","superClass","setPrototypeOf","_inherits","onCountryChange","prevProps","prevState","_props","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectAriaLabel","countrySelectProperties","indicateInvalid","CountrySelectComponent","countrySelectComponent","countrySelectProps","InputComponent","inputComponent","numberInputComponent","numberInputProps","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","keys","_objectWithoutProperties","_state","hidePhoneInputField","isFocused","_countrySelectProps","ref","storeCountrySelectInstance","tabIndex","onFocus","_onFocus","onBlur","_onBlur","focusPhoneInputField","focus","storePhoneNumberInputInstance","onPhoneNumberKeyDown","invalid","cloneElement","parseExtDigits","hasUserSelectedACountry","_state$props","old_default_country","old_value","new_default_country","new_value","new_state","parsedCountry","_countries","propTypes","func","isRequired","bool","arrayOf","objectOf","elementType","object","defaultProps","_this2","new_country","_props2","_state2","old_parsed_input","old_country","new_parsed_input","migrateParsedInputForNewCountry","e164","setState","_input","_props3","_parseInput","parseInput","_event","stopPropagation","hide","number_input","country_select","CountrySelectOptionIcon","FlagComponent","InternationalIcon","createCountrySelectOptionIconComponent","transform","optionsOnTop","optionsOnBottom","appendTo","_loop","divider","option","splice","concat","transformCountryOptions","getCountrySelectOptions","isCountrySupported","map","label","icon","generateNationalNumberDigits","countryOption","isCountryOptionSupportedWithError","is_possible_number","is_international","isValidNumber","hasTypes","defaultOptions","formatExtension","formattedNumber","extension","addExtension","format_national_number","fromCountry","IDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","changeInternationalFormatStyle","format_as","last_leading_digits_pattern","choose_format_for_number","local","trim","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","getIDDPrefix","countryMetadata","defaultIDDPrefix","stripIDDPrefix","IDDPrefixPattern","matchedGroups","_temp2","_parse3","ReactInput","_React$Component","_len","_key","storeInstance","getInputElement","_this$props3","_this$props4","_this$props5","rest","isEmpty","symbol","count","_metadataMin","_metadataMin2","_PhoneInputNativeDefaults","createPhoneInput","_propTypes","shape","country_calling_codes","componentWillMount","getDerivedStateFromProps","componentWillReceiveProps","nextProps","bind","componentWillUpdate","nextState","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","isReactComponent","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","newApiName","componentDidUpdate","maybeSnapshot","snapshot","__suppressDeprecationWarning","toUpperCase","SKIP_COUNTRIES","getCountryCodeForFlag","parameters","_parsePhoneNumber2","_isValidPhoneNumber2","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography","forwardRef","_props$align","align","_props$color","color","component","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variant","variant","_props$variantMapping","variantMapping","other","root","theme","margin","typography","caption","button","overline","srOnly","position","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","colorTextSecondary","colorError","displayInline","displayBlock","useEnhancedEffect","window","useEffect","useLayoutEffect","ListItem","_props$alignItems","alignItems","_props$autoFocus","autoFocus","_props$button","childrenProp","children","componentProp","_props$ContainerCompo","ContainerComponent","_props$ContainerProps","ContainerProps","ContainerClassName","_props$dense","dense","_props$disabled","_props$disableGutters","disableGutters","_props$divider","focusVisibleClassName","_props$selected","selected","context","useContext","childContext","listItemRef","useRef","current","Children","toArray","hasSecondaryAction","handleOwnRef","useCallback","findDOMNode","handleRef","componentProps","gutters","alignItemsFlexStart","secondaryAction","focusVisible","Provider","container","justifyContent","textDecoration","boxSizing","paddingTop","paddingBottom","backgroundColor","action","opacity","borderBottom","backgroundClip","paddingLeft","paddingRight","transition","transitions","duration","shortest","hover","ListItemText","_props$disableTypogra","disableTypography","_props$inset","inset","primaryProp","primaryTypographyProps","secondaryProp","secondaryTypographyProps","multiline","flex","minWidth","marginTop","excluded","sourceKeys","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","retained_template","empty_placeholder","cut_before","opening_braces","closing_braces","selectionStart","selectionEnd","keyCode","Keys","Backspace","Delete","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","_default2","_InternationalIcon2","_PhoneInputNative2","defaultMetadata","_Component","PhoneInputNativeDefaults","storeInputRef","render","_PhoneInput2","_CountrySelectNative2","PhoneInputNative","countrySelectArrowComponent","COUNTRY_SELECT_PROPERTIES","createInput","InputBasic","newValue","storeInput","Input","alt","src","toLowerCase","includeInternationalOption","country_names","compare_strings","unshift","ZZ","formatNational","previous_country","preferNationalFormat","strip_country_calling_code","getCountryCallingCode","trimNumber","getCountryForPartialE164Number","prevInput","get_country_from_possibly_incomplete_international_phone_number","get_national_significant_number_part","could_number_belong_to_country","partial_national_significant_number","overflowDigitsCount","Metadata","getMaxNumberLength","partialE164Number","derived_country","localeCompare","country_calling_prefix","getNationalNumber","CountrySelectNative","SelectArrow","selectArrowComponent","selectedOption","isValid","V3","DEFAULT_EXT_PREFIX","is_object","country_phone_code_to_countries","type_of","validateMetadata","v1","version","pa","pb","na","nb","isNaN","v3","_country","country_metadata","_getFormats","getDefaultCountryMetadataForRegion","Format","_getNationalPrefixFormattingRule","_getNationalPrefixIsOptionalWhenFormatting","types","getType","Type","getExtPrefix","isSupportedCountry"],"mappings":"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","file":"static/js/2.aa8cfcd7.chunk.js","sourcesContent":["// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _extends({}, options, {\n    v2: true\n  }), metadata);\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text = void 0;\n  var options = void 0;\n  var metadata = void 0; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _extends({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error('Invalid second argument: ' + arg_2);\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _extends({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\n\n\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache = function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \" + key);\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport default LRUCache;","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport LRUCache from './LRUCache'; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache = function () {\n  function RegExpCache(size) {\n    _classCallCheck(this, RegExpCache);\n\n    this.cache = new LRUCache(size);\n  }\n\n  _createClass(RegExpCache, [{\n    key: 'getPatternForRegExp',\n    value: function getPatternForRegExp(pattern) {\n      var regExp = this.cache.get(pattern);\n\n      if (!regExp) {\n        regExp = new RegExp('^' + pattern);\n        this.cache.put(pattern, regExp);\n      }\n\n      return regExp;\n    }\n  }]);\n\n  return RegExpCache;\n}();\n\nexport default RegExpCache;","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\" + lower + \",\" + upper + \"}\";\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\nvar _pZ = \" \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\";\nexport var pZ = '[' + _pZ + ']';\nexport var PZ = '[^' + _pZ + ']';\nexport var _pN = \"0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\"; // const pN = `[${_pN}]`\n\nvar _pNd = \"0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\";\nexport var pNd = '[' + _pNd + ']';\nexport var _pL = \"A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar pL = '[' + _pL + ']';\nvar pL_regexp = new RegExp(pL);\nvar _pSc = \"$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6\";\nvar pSc = '[' + _pSc + ']';\nvar pSc_regexp = new RegExp(pSc);\nvar _pMn = \"\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\";\nvar pMn = '[' + _pMn + ']';\nvar pMn_regexp = new RegExp(pMn);\nvar _InBasic_Latin = '\\0-\\x7F';\nvar _InLatin_1_Supplement = '\\x80-\\xFF';\nvar _InLatin_Extended_A = \"\\u0100-\\u017F\";\nvar _InLatin_Extended_Additional = \"\\u1E00-\\u1EFF\";\nvar _InLatin_Extended_B = \"\\u0180-\\u024F\";\nvar _InCombining_Diacritical_Marks = \"\\u0300-\\u036F\";\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\n\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}","import isValidNumber from '../validate_';\nimport parseDigits from '../parseDigits';\nimport { startsWith, endsWith } from './util';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}","import { trimAfterFirstMatch } from './util'; // Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\n\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\nexport default function parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\nexport default function isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n\n  return true;\n}","// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = '[^' + OPENING_PARENS + CLOSING_PARENS + ']';\nexport var LEAD_CLASS = '[' + OPENING_PARENS + PLUS_CHARS + ']'; // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\n\nimport PhoneNumber from './PhoneNumber';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\nimport RegExpCache from './findNumbers/RegExpCache';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\nimport { isSupportedCountry } from './metadata';\nimport parseNumber from './parse_';\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + pZ + '-|-' + pZ + ')' + pZ + '*(.+)', // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\" + pZ + '*(.+)', // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + pZ + '*([^.]+)', // Breaks on space - e.g. \"3324451234 8002341234\"\npZ + '+(' + PZ + '+)']; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = '[' + VALID_PUNCTUATION + ']' + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _pN + _pL + '#]+$');\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n    this.regExpCache = new RegExpCache(32);\n    options = _extends({}, options, {\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /** The iteration tristate. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches = void 0;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport default PhoneNumberMatcher;","import _findNumbers from './findNumbers_';\nimport { normalizeArguments } from './parsePhoneNumber';\nexport default function findNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return _findNumbers(text, options, metadata);\n}","import PhoneNumberMatcher from './PhoneNumberMatcher';\nexport default function findNumbers(text, options, metadata) {\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  var results = [];\n\n  while (matcher.hasNext()) {\n    results.push(matcher.next());\n  }\n\n  return results;\n}","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\nexport default function searchNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (matcher.hasNext()) {\n          return {\n            done: false,\n            value: matcher.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}","import Metadata from './metadata';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}","import PhoneNumber from './PhoneNumber';\nexport default function getExampleNumber(country, examples, metadata) {\n  if (examples[country]) {\n    return new PhoneNumber(country, examples[country], metadata);\n  }\n}","import AsYouType from './AsYouType';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}","export { default as ParseError } from '../es6/ParseError';\nexport { default as parsePhoneNumber } from '../es6/parsePhoneNumber';\nexport { default as parsePhoneNumberFromString } from '../es6/parsePhoneNumberFromString';\nexport { default as findNumbers } from '../es6/findNumbers';\nexport { default as searchNumbers } from '../es6/searchNumbers';\nexport { default as PhoneNumberMatcher } from '../es6/PhoneNumberMatcher';\nexport { default as AsYouType } from '../es6/AsYouType';\nexport { default as getCountries } from '../es6/getCountries';\nexport { default as Metadata, isSupportedCountry, getCountryCallingCode, getExtPrefix } from '../es6/metadata';\nexport { default as getExampleNumber } from '../es6/getExampleNumber';\nexport { default as formatIncompletePhoneNumber } from '../es6/formatIncompletePhoneNumber';\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from '../es6/parseIncompletePhoneNumber';\nexport { default as parseDigits } from '../es6/parseDigits';\nexport { parseRFC3966, formatRFC3966 } from '../es6/RFC3966';","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onCut = onCut;\nexports.onPaste = onPaste;\nexports.onChange = onChange;\nexports.onKeyDown = onKeyDown;\n\nvar _edit = require('./edit');\n\nvar _edit2 = _interopRequireDefault(_edit);\n\nvar _parse3 = require('./parse');\n\nvar _parse4 = _interopRequireDefault(_parse3);\n\nvar _format2 = require('./format');\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _dom = require('./dom');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction onCut(event, input, _parse, _format, on_change) {\n  // The actual cut hasn't happened just yet hence the timeout.\n  setTimeout(function () {\n    return format_input_text(input, _parse, _format, undefined, on_change);\n  }, 0);\n}\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n  var selection = (0, _dom.getSelection)(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    erase_selection(input, selection);\n  }\n\n  format_input_text(input, _parse, _format, undefined, on_change);\n}\n\nfunction onChange(event, input, _parse, _format, on_change) {\n  format_input_text(input, _parse, _format, undefined, on_change);\n} // Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\n\n\nfunction onKeyDown(event, input, _parse, _format, on_change) {\n  var operation = (0, _dom.getOperation)(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = (0, _dom.getSelection)(input); // If selection is made,\n      // just erase the selected text,\n      // and don't apply any more operations to it.\n\n      if (selection) {\n        erase_selection(input, selection);\n        return format_input_text(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually\n\n\n      return format_input_text(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled when `onChange` fires.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\n\nfunction erase_selection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  (0, _dom.setCaretPosition)(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get `value` and `caret` position.\n  var _parse2 = (0, _parse4.default)(input.value, (0, _dom.getCaretPosition)(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n  // then apply that operation and get new `value` and `caret` position.\n\n\n  if (operation) {\n    var operation_applied = (0, _edit2.default)(value, caret, operation);\n    value = operation_applied.value;\n    caret = operation_applied.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = (0, _format3.default)(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  (0, _dom.setCaretPosition)(input, caret); // `<input/>` textual value may have changed,\n  // so the parsed `value` may have changed too.\n  // The `value` didn't neccessarily change\n  // but it might have.\n\n  on_change(value);\n} //# sourceMappingURL=input control.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2]; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  metadata.country(input.country); // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _type = _ref;\n\n    if (is_of_type(nationalNumber, _type, metadata)) {\n      return _type;\n    }\n  }\n}\nexport function is_of_type(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n} // Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographical entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths)\n      // {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // }\n      // else\n      // {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var regular_expression = arguments[1];\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\n\nexport function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b)\n  // {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}","var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number = void 0;\n  var ext = void 0; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n  }\n\n  return 'tel:' + number + (ext ? ';ext=' + ext : '');\n}","import { parseDigit } from './parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, value) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (value) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://stackoverflow.com/a/46971044/970769\n\n\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    } // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      var _metadata = new Metadata(metadata);\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: 'isPossible',\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'isValid',\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: 'getType',\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'format',\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _extends({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: 'formatNational',\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: 'formatInternational',\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: 'getURI',\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parse; // Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\n\nfunction parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}","export { default } from './modules/PhoneInputNativeDefaultMetadata';\nexport { parseRFC3966, formatRFC3966 } from './modules/libphonenumber/RFC3966';\nexport { default as parsePhoneNumber } from './modules/libphonenumber/parsePhoneNumberDefaultMetadata';\nexport { default as formatPhoneNumber, formatPhoneNumberIntl } from './modules/formatPhoneNumberDefaultMetadata';\nexport { default as isValidPhoneNumber } from './modules/isValidPhoneNumberDefaultMetadata'; // Deprecated export.\n// Use `import PhoneInput from 'react-phone-number-input/core'` instead.\n\nexport { default as PhoneInput } from './modules/PhoneInput'; // Just a re-export of `getCountryCallingCode()` because people keep asking for it.\n// https://github.com/catamphetamine/react-phone-number-input/issues/284\n\nexport { getCountryCallingCode } from 'libphonenumber-js/min';","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\n\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { matchesEntirely } from './util';\nimport { extractCountryCallingCode as _extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\nimport { checkNumberLengthForType } from './getNumberType_';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\n\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\n\n\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n  /**\r\n   * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(defaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.options = {};\n    this.metadata = new Metadata(metadata);\n\n    if (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n      this.defaultCountry = defaultCountry;\n    }\n\n    this.reset();\n  } // Not setting `options` to a constructor argument\n  // not to break backwards compatibility\n  // for older versions of the library.\n\n\n  _createClass(AsYouType, [{\n    key: 'input',\n    value: function input(text) {\n      // Parse input\n      var extracted_number = extract_formatted_phone_number(text) || ''; // Special case for a lone '+' sign\n      // since it's not considered a possible phone number.\n\n      if (!extracted_number) {\n        if (text && text.indexOf('+') >= 0) {\n          extracted_number = '+';\n        }\n      } // Validate possible first part of a phone number\n\n\n      if (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n        return this.currentOutput;\n      }\n\n      return this.processInput(parseIncompletePhoneNumber(extracted_number));\n    }\n  }, {\n    key: 'processInput',\n    value: function processInput(input) {\n      // If an out of position '+' sign detected\n      // (or a second '+' sign),\n      // then just drop it from the input.\n      if (input[0] === '+') {\n        if (!this.parsedInput) {\n          this.parsedInput += '+'; // If a default country was set\n          // then reset it because an explicitly international\n          // phone number is being entered\n\n          this.resetCountriness();\n        }\n\n        input = input.slice(1);\n      } // Raw phone number\n\n\n      this.parsedInput += input; // // Reset phone number validation state\n      // this.valid = false\n      // Add digits to the national number\n\n      this.nationalNumber += input; // TODO: Deprecated: rename `this.nationalNumber`\n      // to `this.nationalNumber` and remove `.getNationalNumber()`.\n      // Try to format the parsed input\n\n      if (this.isInternational()) {\n        if (!this.countryCallingCode) {\n          // Extract country calling code from the digits entered so far.\n          // There must be some digits in order to extract anything from them.\n          if (!this.nationalNumber) {\n            // Return raw phone number\n            return this.parsedInput;\n          } // If one looks at country phone codes\n          // then he can notice that no one country phone code\n          // is ever a (leftmost) substring of another country phone code.\n          // So if a valid country code is extracted so far\n          // then it means that this is the country code.\n          // If no country phone code could be extracted so far,\n          // then just return the raw phone number,\n          // because it has no way of knowing\n          // how to format the phone number so far.\n\n\n          if (!this.extractCountryCallingCode()) {\n            // Return raw phone number\n            return this.parsedInput;\n          } // Initialize country-specific data\n\n\n          this.initialize_phone_number_formats_for_this_country_calling_code();\n          this.resetFormat();\n          this.determineTheCountry();\n        } // `this.country` could be `undefined`,\n        // for instance, when there is ambiguity\n        // in a form of several different countries\n        // each corresponding to the same country phone code\n        // (e.g. NANPA: USA, Canada, etc),\n        // and there's not enough digits entered\n        // to reliably determine the country\n        // the phone number belongs to.\n        // Therefore, in cases of such ambiguity,\n        // each time something is input,\n        // try to determine the country\n        // (if it's not determined yet).\n        else if (!this.country) {\n            this.determineTheCountry();\n          }\n      } else {\n        // Some national prefixes are substrings of other national prefixes\n        // (for the same country), therefore try to extract national prefix each time\n        // because a longer national prefix might be available at some point in time.\n        var previous_national_prefix = this.nationalPrefix;\n        this.nationalNumber = this.nationalPrefix + this.nationalNumber; // Possibly extract a national prefix\n\n        this.extractNationalPrefix();\n\n        if (this.nationalPrefix !== previous_national_prefix) {\n          // National number has changed\n          // (due to another national prefix been extracted)\n          // therefore national number has changed\n          // therefore reset all previous formatting data.\n          // (and leading digits matching state)\n          this.matching_formats = undefined;\n          this.resetFormat();\n        }\n      } // if (!this.shouldFormat())\n      // {\n      // \treturn this.format_as_non_formatted_number()\n      // }\n\n\n      if (!this.nationalNumber) {\n        return this.format_as_non_formatted_number();\n      } // Check the available phone number formats\n      // based on the currently available leading digits.\n\n\n      this.match_formats_by_leading_digits(); // Format the phone number (given the next digits)\n\n      var formatted_national_phone_number = this.formatNationalNumber(input); // If the phone number could be formatted,\n      // then return it, possibly prepending with country phone code\n      // (for international phone numbers only)\n\n      if (formatted_national_phone_number) {\n        return this.formatFullNumber(formatted_national_phone_number);\n      } // If the phone number couldn't be formatted,\n      // then just fall back to the raw phone number.\n\n\n      return this.format_as_non_formatted_number();\n    }\n  }, {\n    key: 'format_as_non_formatted_number',\n    value: function format_as_non_formatted_number() {\n      // Strip national prefix for incorrectly inputted international phones.\n      if (this.isInternational() && this.countryCallingCode) {\n        return '+' + this.countryCallingCode + this.nationalNumber;\n      }\n\n      return this.parsedInput;\n    }\n  }, {\n    key: 'formatNationalNumber',\n    value: function formatNationalNumber(next_digits) {\n      // Format the next phone number digits\n      // using the previously chosen phone number format.\n      //\n      // This is done here because if `attempt_to_format_complete_phone_number`\n      // was placed before this call then the `template`\n      // wouldn't reflect the situation correctly (and would therefore be inconsistent)\n      //\n      var national_number_formatted_with_previous_format = void 0;\n\n      if (this.chosenFormat) {\n        national_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n      } // See if the input digits can be formatted properly already. If not,\n      // use the results from formatNextNationalNumberDigits(), which does formatting\n      // based on the formatting pattern chosen.\n\n\n      var formatted_number = this.attempt_to_format_complete_phone_number(); // Just because a phone number doesn't have a suitable format\n      // that doesn't mean that the phone is invalid\n      // because phone number formats only format phone numbers,\n      // they don't validate them and some (rare) phone numbers\n      // are meant to stay non-formatted.\n\n      if (formatted_number) {\n        return formatted_number;\n      } // For some phone number formats national prefix\n      // If the previously chosen phone number format\n      // didn't match the next (current) digit being input\n      // (leading digits pattern didn't match).\n\n\n      if (this.chooseAnotherFormat()) {\n        // And a more appropriate phone number format\n        // has been chosen for these `leading digits`,\n        // then format the national phone number (so far)\n        // using the newly selected phone number pattern.\n        // Will return `undefined` if it couldn't format\n        // the supplied national number\n        // using the selected phone number pattern.\n        return this.reformatNationalNumber();\n      } // If could format the next (current) digit\n      // using the previously chosen phone number format\n      // then return the formatted number so far.\n      // If no new phone number format could be chosen,\n      // and couldn't format the supplied national number\n      // using the selected phone number pattern,\n      // then it will return `undefined`.\n\n\n      return national_number_formatted_with_previous_format;\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      // Input stripped of non-phone-number characters.\n      // Can only contain a possible leading '+' sign and digits.\n      this.parsedInput = '';\n      this.currentOutput = ''; // This contains the national prefix that has been extracted. It contains only\n      // digits without formatting.\n\n      this.nationalPrefix = '';\n      this.nationalNumber = '';\n      this.carrierCode = '';\n      this.resetCountriness();\n      this.resetFormat();\n      return this;\n    }\n  }, {\n    key: 'resetCountry',\n    value: function resetCountry() {\n      if (this.isInternational()) {\n        this.country = undefined;\n      } else {\n        this.country = this.defaultCountry;\n      }\n    }\n  }, {\n    key: 'resetCountriness',\n    value: function resetCountriness() {\n      this.resetCountry();\n\n      if (this.defaultCountry && !this.isInternational()) {\n        this.metadata.country(this.defaultCountry);\n        this.countryCallingCode = this.metadata.countryCallingCode();\n        this.initialize_phone_number_formats_for_this_country_calling_code();\n      } else {\n        this.metadata.country(undefined);\n        this.countryCallingCode = undefined; // \"Available formats\" are all formats available for the country.\n        // \"Matching formats\" are only formats eligible for the national number being entered.\n\n        this.available_formats = [];\n        this.matching_formats = undefined;\n      }\n    }\n  }, {\n    key: 'resetFormat',\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.partially_populated_template = undefined;\n      this.last_match_position = -1;\n    } // Format each digit of national phone number (so far)\n    // using the newly selected phone number pattern.\n\n  }, {\n    key: 'reformatNationalNumber',\n    value: function reformatNationalNumber() {\n      // Format each digit of national phone number (so far)\n      // using the selected phone number pattern.\n      return this.formatNextNationalNumberDigits(this.nationalNumber);\n    }\n  }, {\n    key: 'initialize_phone_number_formats_for_this_country_calling_code',\n    value: function initialize_phone_number_formats_for_this_country_calling_code() {\n      // Get all \"eligible\" phone number formats for this country\n      this.available_formats = this.metadata.formats().filter(function (format) {\n        return ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n      });\n      this.matching_formats = undefined;\n    }\n  }, {\n    key: 'match_formats_by_leading_digits',\n    value: function match_formats_by_leading_digits() {\n      var leading_digits = this.nationalNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digits patterns already match for a single first digit.\n\n      var index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (index_of_leading_digits_pattern < 0) {\n        index_of_leading_digits_pattern = 0;\n      } // \"Available formats\" are all formats available for the country.\n      // \"Matching formats\" are only formats eligible for the national number being entered.\n      // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n      // then format matching starts narrowing down the list of possible formats\n      // (only previously matched formats are considered for next digits).\n\n\n      var available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n      this.had_enough_leading_digits = this.shouldFormat();\n      this.matching_formats = available_formats.filter(function (format) {\n        var leading_digits_patterns_count = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n        // leading digits pattern then it fits.\n\n        if (leading_digits_patterns_count === 0) {\n          return true;\n        }\n\n        var leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n        var leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]; // Brackets are required for `^` to be applied to\n        // all or-ed (`|`) parts, not just the first one.\n\n        return new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: 'shouldFormat',\n    value: function shouldFormat() {\n      // Start matching any formats at all when the national number\n      // entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives\n      // like when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Presumably the limitation of \"3 digits min\"\n      // is imposed to exclude false matches,\n      // e.g. when there are two different formats\n      // each one fitting one or two leading digits being input.\n      // But for this case I would propose a specific `if/else` condition.\n      //\n      return this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n    } // Check to see if there is an exact pattern match for these digits. If so, we\n    // should use this instead of any other formatting template whose\n    // `leadingDigitsPattern` also matches the input.\n\n  }, {\n    key: 'attempt_to_format_complete_phone_number',\n    value: function attempt_to_format_complete_phone_number() {\n      for (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var format = _ref;\n        var matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n        if (!matcher.test(this.nationalNumber)) {\n          continue;\n        }\n\n        if (!this.isFormatApplicable(format)) {\n          continue;\n        } // To leave the formatter in a consistent state\n\n\n        this.resetFormat();\n        this.chosenFormat = format;\n        var formatted_number = format_national_number_using_format(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata); // Special handling for NANPA countries for AsYouType formatter.\n        // Copied from Google's `libphonenumber`:\n        // https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\n        if (this.nationalPrefix && this.countryCallingCode === '1') {\n          formatted_number = '1 ' + formatted_number;\n        } // Set `this.template` and `this.partially_populated_template`.\n        //\n        // `else` case doesn't ever happen\n        // with the current metadata,\n        // but just in case.\n        //\n\n        /* istanbul ignore else */\n\n\n        if (this.createFormattingTemplate(format)) {\n          // Populate `this.partially_populated_template`\n          this.reformatNationalNumber();\n        } else {\n          // Prepend `+CountryCode` in case of an international phone number\n          var full_number = this.formatFullNumber(formatted_number);\n          this.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n          this.partially_populated_template = full_number;\n        }\n\n        return formatted_number;\n      }\n    } // Prepends `+CountryCode` in case of an international phone number\n\n  }, {\n    key: 'formatFullNumber',\n    value: function formatFullNumber(formattedNationalNumber) {\n      if (this.isInternational()) {\n        return '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n      }\n\n      return formattedNationalNumber;\n    } // Extracts the country calling code from the beginning\n    // of the entered `national_number` (so far),\n    // and places the remaining input into the `national_number`.\n\n  }, {\n    key: 'extractCountryCallingCode',\n    value: function extractCountryCallingCode() {\n      var _extractCountryCallin = _extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (!countryCallingCode) {\n        return;\n      }\n\n      this.countryCallingCode = countryCallingCode; // Sometimes people erroneously write national prefix\n      // as part of an international number, e.g. +44 (0) ....\n      // This violates the standards for international phone numbers,\n      // so \"As You Type\" formatter assumes no national prefix\n      // when parsing a phone number starting from `+`.\n      // Even if it did attempt to filter-out that national prefix\n      // it would look weird for a user trying to enter a digit\n      // because from user's perspective the keyboard \"wouldn't be working\".\n\n      this.nationalNumber = number;\n      this.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n      return this.metadata.selectedCountry() !== undefined;\n    }\n  }, {\n    key: 'extractNationalPrefix',\n    value: function extractNationalPrefix() {\n      this.nationalPrefix = '';\n\n      if (!this.metadata.selectedCountry()) {\n        return;\n      } // Only strip national prefixes for non-international phone numbers\n      // because national prefixes can't be present in international phone numbers.\n      // While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\n      var _strip_national_prefi = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata),\n          potential_national_number = _strip_national_prefi.number,\n          carrierCode = _strip_national_prefi.carrierCode;\n\n      if (carrierCode) {\n        this.carrierCode = carrierCode;\n      } // We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\n\n\n      if (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n        // Verify the parsed national (significant) number for this country\n        //\n        // If the original number (before stripping national prefix) was viable,\n        // and the resultant number is not, then prefer the original phone number.\n        // This is because for some countries (e.g. Russia) the same digit could be both\n        // a national prefix and a leading digit of a valid national phone number,\n        // like `8` is the national prefix for Russia and both\n        // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n        if (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n          return;\n        }\n      }\n\n      this.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n      this.nationalNumber = potential_national_number;\n      return this.nationalPrefix;\n    }\n  }, {\n    key: 'isPossibleNumber',\n    value: function isPossibleNumber(number) {\n      var validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\n      switch (validation_result) {\n        case 'IS_POSSIBLE':\n          return true;\n        // case 'IS_POSSIBLE_LOCAL_ONLY':\n        // \treturn !this.isInternational()\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: 'chooseAnotherFormat',\n    value: function chooseAnotherFormat() {\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      for (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var format = _ref2; // If this format is currently being used\n        // and is still possible, then stick to it.\n\n        if (this.chosenFormat === format) {\n          return;\n        } // If this `format` is suitable for \"as you type\",\n        // then extract the template from this format\n        // and use it to format the phone number being input.\n\n\n        if (!this.isFormatApplicable(format)) {\n          continue;\n        }\n\n        if (!this.createFormattingTemplate(format)) {\n          continue;\n        }\n\n        this.chosenFormat = format; // With a new formatting template, the matched position\n        // using the old template needs to be reset.\n\n        this.last_match_position = -1;\n        return true;\n      } // No format matches the phone number,\n      // therefore set `country` to `undefined`\n      // (or to the default country).\n\n\n      this.resetCountry(); // No format matches the national phone number entered\n\n      this.resetFormat();\n    }\n  }, {\n    key: 'isFormatApplicable',\n    value: function isFormatApplicable(format) {\n      // If national prefix is mandatory for this phone number format\n      // and the user didn't input the national prefix\n      // then this phone number format isn't suitable.\n      if (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n        return false;\n      } // If this format doesn't use national prefix\n      // but the user did input national prefix\n      // then this phone number format isn't suitable.\n\n\n      if (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'createFormattingTemplate',\n    value: function createFormattingTemplate(format) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForNumberFormatPattern(format); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (!template) {\n        return;\n      } // This one is for national number only\n\n\n      this.partially_populated_template = template; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (this.isInternational()) {\n        this.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n      } // For local numbers, replace national prefix\n      // with a digit placeholder.\n      else {\n          this.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n        } // This one is for the full phone number\n\n\n      return this.template;\n    } // Generates formatting template for a phone number format\n\n  }, {\n    key: 'getTemplateForNumberFormatPattern',\n    value: function getTemplateForNumberFormatPattern(format) {\n      // A very smart trick by the guys at Google\n      var number_pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        number_pattern = number_pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n\n\n      var dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n        return;\n      } // Prepare the phone number format\n\n\n      var number_format = this.getFormatFormat(format); // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strict_pattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strict_pattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalNumber : `111111111` (9 digits)\n      //\n      // number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // number_format : `$1 $2 $3`\n      // dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `number_pattern`.\n      //\n      // The fix is, if `this.nationalNumber` has already sufficient length\n      // to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n      // instead of `dummy_phone_number_matching_format_pattern`.\n\n      var strict_pattern = new RegExp('^' + number_pattern + '$');\n      var national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalNumber` has already sufficient length\n      // to satisfy the `number_pattern` completely then use it\n      // instead of `dummy_phone_number_matching_format_pattern`.\n\n      if (strict_pattern.test(national_number_dummy_digits)) {\n        dummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n      } // Generate formatting template for this phone number format\n\n\n      return dummy_phone_number_matching_format_pattern // Format the dummy phone number according to the format\n      .replace(new RegExp(number_pattern), number_format) // Replace each dummy digit with a DIGIT_PLACEHOLDER\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n    }\n  }, {\n    key: 'formatNextNationalNumberDigits',\n    value: function formatNextNationalNumberDigits(digits) {\n      // Using `.split('')` to iterate through a string here\n      // to avoid requiring `Symbol.iterator` polyfill.\n      // `.split('')` is generally not safe for Unicode,\n      // but in this particular case for `digits` it is safe.\n      // for (const digit of digits)\n      for (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var digit = _ref3; // If there is room for more digits in current `template`,\n        // then set the next digit in the `template`,\n        // and return the formatted digits so far.\n        // If more digits are entered than the current format could handle\n\n        if (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n          // Reset the current format,\n          // so that the new format will be chosen\n          // in a subsequent `this.chooseAnotherFormat()` call\n          // later in code.\n          this.chosenFormat = undefined;\n          this.template = undefined;\n          this.partially_populated_template = undefined;\n          return;\n        }\n\n        this.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n        this.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n      } // Return the formatted phone number so far.\n\n\n      return cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n      // \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n    }\n  }, {\n    key: 'isInternational',\n    value: function isInternational() {\n      return this.parsedInput && this.parsedInput[0] === '+';\n    }\n  }, {\n    key: 'getFormatFormat',\n    value: function getFormatFormat(format) {\n      if (this.isInternational()) {\n        return changeInternationalFormatStyle(format.internationalFormat());\n      } // If national prefix formatting rule is set\n      // for this phone number format\n\n\n      if (format.nationalPrefixFormattingRule()) {\n        // If the user did input the national prefix\n        // (or if the national prefix formatting rule does not require national prefix)\n        // then maybe make it part of the phone number template\n        if (this.nationalPrefix || !format.usesNationalPrefix()) {\n          // Make the national prefix part of the phone number template\n          return format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n        }\n      } // Special handling for NANPA countries for AsYouType formatter.\n      // Copied from Google's `libphonenumber`:\n      // https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n      else if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n          return '1 ' + format.format();\n        }\n\n      return format.format();\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: 'determineTheCountry',\n    value: function determineTheCountry() {\n      this.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata);\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: 'getNumber',\n    value: function getNumber() {\n      if (!this.countryCallingCode || !this.nationalNumber) {\n        return undefined;\n      }\n\n      var phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\n      if (this.carrierCode) {\n        phoneNumber.carrierCode = this.carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    } // This method is still used in `react-phone-number-input/source/input-control.js`.\n\n  }, {\n    key: 'getNationalNumber',\n    value: function getNationalNumber() {\n      return this.nationalNumber;\n    }\n  }, {\n    key: 'getTemplate',\n    value: function getTemplate() {\n      if (!this.template) {\n        return;\n      }\n\n      var index = -1;\n      var i = 0;\n\n      while (i < this.parsedInput.length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cut_stripping_dangling_braces(this.template, index + 1);\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport default AsYouType;\nexport function strip_dangling_braces(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray4) {\n      if (_i4 >= _iterator4.length) break;\n      _ref4 = _iterator4[_i4++];\n    } else {\n      _i4 = _iterator4.next();\n      if (_i4.done) break;\n      _ref4 = _i4.value;\n    }\n\n    var index = _ref4;\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n  if (string[cut_before_index] === ')') {\n    cut_before_index++;\n  }\n\n  return strip_dangling_braces(string.slice(0, cut_before_index));\n}\nexport function close_dangling_braces(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n} // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray5) {\n      if (_i5 >= _iterator5.length) break;\n      _ref5 = _iterator5[_i5++];\n    } else {\n      _i5 = _iterator5.next();\n      if (_i5.done) break;\n      _ref5 = _i5.value;\n    }\n\n    var character = _ref5;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$'); // `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error('Unknown country: ' + options.defaultCountry);\n  } // Parse the phone number.\n\n\n  var _parse_input = parse_input(text, options.v2),\n      formatted_phone_number = _parse_input.number,\n      ext = _parse_input.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formatted_phone_number) {\n    if (options.v2) {\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parse_phone_number = parse_phone_number(formatted_phone_number, options.defaultCountry, metadata),\n      country = _parse_phone_number.country,\n      nationalNumber = _parse_phone_number.national_number,\n      countryCallingCode = _parse_phone_number.countryCallingCode,\n      carrierCode = _parse_phone_number.carrierCode;\n\n  if (!metadata.selectedCountry()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\n\nexport function extract_formatted_phone_number(text, v2) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (v2) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (starts_at < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(starts_at) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n} // Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\n\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n  if (!number || !metadata.nationalPrefixForParsing()) {\n    return {\n      number: number\n    };\n  } // In many countries the national prefix\n  // is not just a constant digit (like `0` in UK)\n  // but can be different depending on the phone number\n  // (and can be also absent for some phone numbers).\n  //\n  // So `national_prefix_for_parsing` is used when parsing\n  // a national-prefixed (local) phone number\n  // into a national significant phone number\n  // extracting that possible national prefix out of it.\n  //\n  // Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\n  // Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\n  // Attempt to parse the first digits as a national prefix\n\n\n  var national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n  var national_prefix_matcher = national_prefix_pattern.exec(number); // If no national prefix is present in the phone number,\n  // but the national prefix is optional for this country,\n  // then consider this phone number valid.\n  //\n  // Google's reference `libphonenumber` implementation\n  // wouldn't recognize such phone numbers as valid,\n  // but I think it would perfectly make sense\n  // to consider such phone numbers as valid\n  // because if a national phone number was originally\n  // formatted without the national prefix\n  // then it must be parseable back into the original national number.\n  // In other words, `parse(format(number))`\n  // must always be equal to `number`.\n  //\n\n  if (!national_prefix_matcher) {\n    return {\n      number: number\n    };\n  }\n\n  var national_significant_number = void 0; // In more complex cases just `national_prefix_for_parsing` regexp\n  // is not enough to extract the national number and then strip it\n  // like `number.slice(national_prefix.length)` because when parsing\n  // national numbers it's not always clear whether the first digits\n  // are a national prefix or part of the national significant number.\n  // For such cases `national_prefix_transform_rule` regexp is present\n  // which contains \"capturing groups\" that are later used in such\n  // `national_prefix_transform_rule` to transform the national number\n  // being parsed into the national significant number.\n  //\n  // Example.\n  // Country: U.S. Virgin Islands (VI).\n  // Country calling code: +1.\n  // Leading digits: 340.\n  // Phone number format: +1 (340) xxx-xxxx.\n  // National prefix: 1.\n  // National prefix for parsing: 1|([2-9]\\d{6})$.\n  // National prefix transform rule: 340$1.\n  //\n  // So for input \"13401234567\" \"national prefix for parsing\" regexp\n  // will return \"1\" and the national significant number will be\n  // \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\n  //\n  // And for input \"3401234567\" \"national prefix for parsing\" regexp\n  // the \"captured group\" will be \"3401234567\" and the national significant\n  // number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\n  //\n  // `national_prefix_matcher[captured_groups_count]` means that\n  // the corresponding \"captured group\" is not empty.\n  // It can be empty if the regexp either doesn't have any \"capturing groups\"\n  // or if the \"capturing groups\" are defined as optional.\n  // Example: \"0?(?:...)?\" for Argentina.\n  //\n\n  var captured_groups_count = national_prefix_matcher.length - 1;\n\n  if (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n    national_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n  } // If it's a simple-enough case then just strip the national prefix from the number.\n  else {\n      // National prefix is the whole substring matched by\n      // the `national_prefix_for_parsing` regexp.\n      var national_prefix = national_prefix_matcher[0];\n      national_significant_number = number.slice(national_prefix.length);\n    }\n\n  var carrierCode = void 0;\n\n  if (captured_groups_count > 0) {\n    carrierCode = national_prefix_matcher[1];\n  } // The following is done in `get_country_and_national_number_for_local_number()` instead.\n  //\n  // // Verify the parsed national (significant) number for this country\n  // const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n  // //\n  // // If the original number (before stripping national prefix) was viable,\n  // // and the resultant number is not, then prefer the original phone number.\n  // // This is because for some countries (e.g. Russia) the same digit could be both\n  // // a national prefix and a leading digit of a valid national phone number,\n  // // like `8` is the national prefix for Russia and both\n  // // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n  // if (matchesEntirely(number, national_number_rule) &&\n  // \t\t!matchesEntirely(national_significant_number, national_number_rule))\n  // {\n  // \treturn number\n  // }\n  // Return the parsed national (significant) number\n\n\n  return {\n    number: national_significant_number,\n    carrierCode: carrierCode\n  };\n}\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n  // Is always non-empty, because `country_calling_code` is always valid\n  var possible_countries = metadata.countryCallingCodes()[country_calling_code]; // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n  if (possible_countries.length === 1) {\n    return possible_countries[0];\n  }\n\n  return _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n} // Changes `metadata` `country`.\n\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: national_phone_number,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parse_input(text, v2) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extract_formatted_phone_number(text, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !isViablePhoneNumber(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var with_extension_stripped = extractExtension(number);\n\n  if (with_extension_stripped.ext) {\n    return with_extension_stripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, national_number, ext) {\n  var result = {\n    country: country,\n    phone: national_number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\n\n\nfunction parse_phone_number(formatted_phone_number, default_country, metadata) {\n  var _extractCountryCallin = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number;\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var country = void 0;\n\n  if (countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n  } else if (default_country) {\n    metadata.country(default_country);\n    country = default_country;\n    countryCallingCode = getCountryCallingCode(default_country, metadata.metadata);\n  } else return {};\n\n  var _parse_national_numbe = parse_national_number(number, metadata),\n      national_number = _parse_national_numbe.national_number,\n      carrier_code = _parse_national_numbe.carrier_code; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = find_country_code(countryCallingCode, national_number, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    metadata.country(country);\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    national_number: national_number,\n    carrierCode: carrier_code\n  };\n}\n\nfunction parse_national_number(number, metadata) {\n  var national_number = parseIncompletePhoneNumber(number);\n  var carrier_code = void 0; // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n  var _strip_national_prefi = strip_national_prefix_and_carrier_code(national_number, metadata),\n      potential_national_number = _strip_national_prefi.number,\n      carrierCode = _strip_national_prefi.carrierCode; // If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n  if (metadata.possibleLengths()) {\n    // We require that the NSN remaining after stripping the national prefix and\n    // carrier code be long enough to be a possible length for the region.\n    // Otherwise, we don't do the stripping, since the original number could be\n    // a valid short number.\n    switch (checkNumberLengthForType(potential_national_number, undefined, metadata)) {\n      case 'TOO_SHORT': // case 'IS_POSSIBLE_LOCAL_ONLY':\n\n      case 'INVALID_LENGTH':\n        break;\n\n      default:\n        national_number = potential_national_number;\n        carrier_code = carrierCode;\n    }\n  } else {\n    // If the original number (before stripping national prefix) was viable,\n    // and the resultant number is not, then prefer the original phone number.\n    // This is because for some countries (e.g. Russia) the same digit could be both\n    // a national prefix and a leading digit of a valid national phone number,\n    // like `8` is the national prefix for Russia and both\n    // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n    if (matchesEntirely(national_number, metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, metadata.nationalNumberPattern())) {// Keep the number without stripping national prefix.\n    } else {\n      national_number = potential_national_number;\n      carrier_code = carrierCode;\n    }\n  }\n\n  return {\n    national_number: national_number,\n    carrier_code: carrier_code\n  };\n} // Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parse_phone_number(number, null, metadata).country\n// }\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\n\n\nexport function extractCountryCallingCode(number, country, metadata) {\n  number = parseIncompletePhoneNumber(number);\n\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then don't extract country phone code.\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIDDPrefix(number, country, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var countryCallingCode = number.slice(1, i);\n\n    if (metadata.countryCallingCodes()[countryCallingCode]) {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}","import { VALID_DIGITS } from './constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext='; // Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\n\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\nfunction create_extension_pattern(purpose) {\n  // One-character symbols that can be used to indicate an extension.\n  var single_extension_characters = \"x\\uFF58#\\uFF03~\\uFF5E\";\n\n  switch (purpose) {\n    // For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n    // allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n    case 'parsing':\n      single_extension_characters = ',;' + single_extension_characters;\n  }\n\n  return RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\" + // \"доб.\"\n  \"\\u0434\\u043E\\u0431|\" + '[' + single_extension_characters + \"]|int|anexo|\\uFF49\\uFF4E\\uFF54)\" + \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\" + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\n\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching'); // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var number_without_extension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i] != null && matches[i].length > 0) {\n      return {\n        number: number_without_extension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = format;\n\nvar _templateFormatter = require('./template formatter');\n\nvar _templateFormatter2 = _interopRequireDefault(_templateFormatter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\n\nfunction format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = (0, _templateFormatter2.default)(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments[2];\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = (0, _helpers.count_occurences)(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = (0, _closeBraces2.default)(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n};\n\nvar _helpers = require('./helpers');\n\nvar _closeBraces = require('./close braces');\n\nvar _closeBraces2 = _interopRequireDefault(_closeBraces);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} //# sourceMappingURL=template formatter.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = InternationalIcon;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction InternationalIcon() {\n  return _react2.default.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }, _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), _react2.default.createElement(\"line\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), _react2.default.createElement(\"line\", {\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  }), _react2.default.createElement(\"path\", {\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp, _initialiseProps; // import InputSmart from './InputSmart'\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _core = require('libphonenumber-js/core');\n\nvar _InputBasic = require('./InputBasic');\n\nvar _InputBasic2 = _interopRequireDefault(_InputBasic);\n\nvar _Flag = require('./Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _inputControl = require('./input-control');\n\nvar _countries2 = require('./countries');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar PhoneNumberInput = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp = _class2 = function (_PureComponent) {\n  _inherits(PhoneNumberInput, _PureComponent);\n\n  function PhoneNumberInput(props) {\n    _classCallCheck(this, PhoneNumberInput);\n\n    var _this = _possibleConstructorReturn(this, (PhoneNumberInput.__proto__ || Object.getPrototypeOf(PhoneNumberInput)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var _this$props = _this.props,\n        value = _this$props.value,\n        labels = _this$props.labels,\n        international = _this$props.international,\n        metadata = _this$props.metadata;\n    var _this$props2 = _this.props,\n        country = _this$props2.country,\n        countries = _this$props2.countries,\n        countryOptions = _this$props2.countryOptions; // Validate `country`.\n\n    if (country) {\n      if (!_this.isCountrySupportedWithError(country)) {\n        country = undefined;\n      }\n    } // Validate `countries`.\n\n\n    countries = filterCountries(countries, metadata); // Validate `countryOptions`.\n\n    countryOptions = filterCountryOptions(countryOptions, metadata);\n    var phoneNumber = (0, _inputControl.parsePhoneNumber)(value, metadata);\n    var pre_selected_country = (0, _inputControl.getPreSelectedCountry)(phoneNumber, country, countries || (0, _countries2.getCountryCodes)(labels).filter(function (_) {\n      return _ === 'ZZ' || metadata.countries[_];\n    }), international, metadata);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: pre_selected_country,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: countries,\n      // Generate country `<select/>` options.\n      country_select_options: generateCountrySelectOptions(countries, countryOptions, _this.props),\n      // `parsed_input` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsed_input` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsed_input` is `+78005553535`.\n      parsed_input: generateParsedInput(value, phoneNumber, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsed_input` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsed_input` and `country` should be updated.\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.props.country;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (!country || !this.isCountrySupportedWithError(country)) {\n          country = undefined;\n        }\n\n        if (selectedCountry !== country) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && this.state.country !== prevState.country) {\n        onCountryChange(this.state.country);\n      }\n    } // A shorthand for not passing `metadata` as a second argument.\n    // Country `<select/>` `onChange` handler.\n    // Phone number `<input/>` `onKeyDown` handler.\n\n    /**\r\n     * `<input/>` `onChange()` handler.\r\n     * Updates `value` property accordingly (so that they are kept in sync).\r\n     * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    // Toggles the `--focus` CSS class.\n    // Toggles the `--focus` CSS class.\n    // This `onBlur` interceptor is a workaround for `redux-form`\n    // so that it gets the up-to-date `value` in its `onBlur` handler.\n    // Without this fix it just gets the actual (raw) input field textual value.\n    // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n    //\n    // A developer is not supposed to pass this `onBlur` property manually.\n    // Instead, `redux-form` passes `onBlur` to this component automatically\n    // and this component patches that `onBlur` handler (a hacky way but works).\n    //\n    // When country `<select/>` is toggled.\n    // Can be called externally.\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          name = _props.name,\n          disabled = _props.disabled,\n          disablePhoneInput = _props.disablePhoneInput,\n          autoComplete = _props.autoComplete,\n          countrySelectTabIndex = _props.countrySelectTabIndex,\n          showCountrySelect = _props.showCountrySelect,\n          style = _props.style,\n          className = _props.className,\n          inputClassName = _props.inputClassName,\n          getInputClassName = _props.getInputClassName,\n          countrySelectAriaLabel = _props.countrySelectAriaLabel,\n          countrySelectProperties = _props.countrySelectProperties,\n          error = _props.error,\n          indicateInvalid = _props.indicateInvalid,\n          CountrySelectComponent = _props.countrySelectComponent,\n          countrySelectProps = _props.countrySelectProps,\n          InputComponent = _props.inputComponent,\n          inputComponent = _props.numberInputComponent,\n          numberInputProps = _props.numberInputProps,\n          ext = _props.ext,\n          _ = _props.country,\n          countries = _props.countries,\n          countryOptions = _props.countryOptions,\n          labels = _props.labels,\n          flags = _props.flags,\n          flagComponent = _props.flagComponent,\n          flagsPath = _props.flagsPath,\n          international = _props.international,\n          internationalIcon = _props.internationalIcon,\n          displayInitialValueAsLocalNumber = _props.displayInitialValueAsLocalNumber,\n          onCountryChange = _props.onCountryChange,\n          limitMaxLength = _props.limitMaxLength,\n          metadata = _props.metadata,\n          phoneNumberInputProps = _objectWithoutProperties(_props, ['name', 'disabled', 'disablePhoneInput', 'autoComplete', 'countrySelectTabIndex', 'showCountrySelect', 'style', 'className', 'inputClassName', 'getInputClassName', 'countrySelectAriaLabel', 'countrySelectProperties', 'error', 'indicateInvalid', 'countrySelectComponent', 'countrySelectProps', 'inputComponent', 'numberInputComponent', 'numberInputProps', 'ext', 'country', 'countries', 'countryOptions', 'labels', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'displayInitialValueAsLocalNumber', 'onCountryChange', 'limitMaxLength', 'metadata']);\n\n      var _state = this.state,\n          country = _state.country,\n          hidePhoneInputField = _state.hidePhoneInputField,\n          country_select_options = _state.country_select_options,\n          parsed_input = _state.parsed_input,\n          isFocused = _state.isFocused; // const InputComponent = InputComponent || (smartCaret ? InputSmart : InputBasic)\n      // Extract `countrySelectProperties` from `this.props`\n      // also removing them from `phoneNumberInputProps`.\n\n      var _countrySelectProps = {};\n\n      if (countrySelectProperties) {\n        for (var key in countrySelectProperties) {\n          if (this.props.hasOwnProperty(key)) {\n            _countrySelectProps[countrySelectProperties[key]] = this.props[key];\n            delete phoneNumberInputProps[key];\n          }\n        }\n      } // Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\n      // however, some users may have already been using this component with one of:\n      // * `<label/>` container\n      // * `aria-labelledby`\n      // * `id` and `<label for/>`\n      // https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\n      // Maybe in some future major version update.\n\n\n      return _react2.default.createElement('div', {\n        style: style,\n        className: (0, _classnames2.default)('react-phone-number-input', {\n          'react-phone-number-input--focus': isFocused,\n          'react-phone-number-input--invalid': error && indicateInvalid\n        }, className)\n      }, _react2.default.createElement('div', {\n        className: 'react-phone-number-input__row'\n      }, showCountrySelect && _react2.default.createElement(CountrySelectComponent, _extends({}, _countrySelectProps, {\n        ref: this.storeCountrySelectInstance,\n        name: name ? name + '__country' : undefined,\n        'aria-label': countrySelectAriaLabel || labels.country,\n        tabIndex: countrySelectTabIndex\n      }, countrySelectProps, {\n        value: country,\n        options: country_select_options,\n        onChange: this.onCountryChange,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        disabled: disabled,\n        hidePhoneInputField: this.hidePhoneInputField,\n        focusPhoneInputField: this.focus,\n        className: 'react-phone-number-input__country'\n      })), !hidePhoneInputField && _react2.default.createElement(InputComponent, _extends({\n        type: 'tel',\n        autoComplete: autoComplete\n      }, numberInputProps, phoneNumberInputProps, {\n        ref: this.storePhoneNumberInputInstance,\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: parsed_input || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onPhoneNumberKeyDown,\n        disabled: disabled || disablePhoneInput,\n        inputComponent: inputComponent,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__phone', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput,\n          'react-phone-number-input__input--invalid': error && indicateInvalid\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput,\n          invalid: error && indicateInvalid\n        }))\n      })), ext && !hidePhoneInputField && _react2.default.createElement('label', {\n        className: 'react-phone-number-input__ext'\n      }, labels.ext, _react2.default.cloneElement(ext, {\n        onChange: ext.props.onChange ? function (event) {\n          return ext.props.onChange(parseExtDigits(event));\n        } : undefined,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__ext-input', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput\n        }), ext.props.className)\n      }))), error && indicateInvalid && _react2.default.createElement('div', {\n        className: 'react-phone-number-input__error'\n      }, error));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          old_default_country = _state$props.country,\n          old_value = _state$props.value;\n      var metadata = props.metadata,\n          countries = props.countries,\n          new_default_country = props.country,\n          new_value = props.value;\n      var new_state = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the default `country` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry // If `countries` or `labels` or `international` changed\n        // then re-generate country `<select/>` options.\n\n      };\n\n      if (props.countries !== state.props.countries || props.labels !== state.props.labels || props.international !== state.props.international) {\n        // Re-generate country select options.\n        new_state.country_select_options = generateCountrySelectOptions(filterCountries(props.countries, metadata), filterCountryOptions(props.countryOptions, metadata), props);\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (new_default_country !== old_default_country && !hasUserSelectedACountry && !value && !new_value) {\n        return _extends({}, new_state, {\n          country: isCountrySupportedWithError(new_default_country, metadata) ? new_default_country : old_default_country // `value` is `undefined`.\n          // `parsed_input` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `new_value !== old_value` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `new_value !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (new_value !== old_value && new_value !== value) {\n          var phoneNumber = (0, _inputControl.parsePhoneNumber)(new_value, metadata);\n          var parsedCountry = void 0;\n\n          if (phoneNumber) {\n            var _countries = filterCountries(props.countries, metadata);\n\n            if (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n              parsedCountry = phoneNumber.country;\n            }\n          }\n\n          return _extends({}, new_state, {\n            parsed_input: generateParsedInput(new_value, phoneNumber, props),\n            value: new_value,\n            country: new_value ? parsedCountry : country\n          });\n        } // `country` didn't change.\n      // `value` didn't change.\n      // `parsed_input` didn't change, because `value` didn't change.\n      //\n      // Maybe `new_state.country_select_options` changed.\n      // In any case, update `prevProps`.\n\n\n      return new_state;\n    }\n  }]);\n\n  return PhoneNumberInput;\n}(PureComponent), _class2.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: _propTypes2.default.string,\n\n  /**\r\n   * Updates the `value` as the user inputs the phone number.\r\n   */\n  onChange: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: _propTypes2.default.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: _propTypes2.default.func,\n\n  /**\r\n   * `onKeyDown` handler (e.g. to handle Enter key press).\r\n   * @ignore\r\n   */\n  onKeyDown: _propTypes2.default.func,\n\n  /**\r\n   * Disables both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  // (is `false` by default)\n  disabled: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Set to `true` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if this flag is set to `true`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, this flag is set to `false`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `false` by default)\n  displayInitialValueAsLocalNumber: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: _propTypes2.default.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: _PropTypes.labels.isRequired,\n\n  /**\r\n   * The base URL path for country flag icons.\r\n   * By default it loads country flag icons from\r\n   * `flag-icon-css` repo github pages website.\r\n   * I imagine someone might want to download\r\n   * those country flag icons and host them\r\n   * on their own servers instead.\r\n   * Warning: in future new countries can be added\r\n   * to the country select which would result in\r\n   * \"Image not found\" errors when using custom `flagsPath`\r\n   * due to the custom-hosted flags bundle being outdated\r\n   * and missing the new flags.\r\n   * So if using custom `flagsPath` always check `CHANGELOG.md`\r\n   * for new country announcements before updating this library.\r\n   */\n  flagsPath: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags replace the default ones.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": () => <img src=\"...\"/> }`\r\n   *\r\n   * Can be used to replace the default flags\r\n   * with custom ones for certain (or all) countries.\r\n   *\r\n   * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n   *\r\n   * By default flag icons are inserted as `<img/>`s\r\n   * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n   *\r\n   * There might be some cases\r\n   * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n   * when including the full set of `<svg/>` country flags (3 megabytes)\r\n   * is more appropriate than downloading them individually at runtime only if needed.\r\n   *\r\n   * Example:\r\n   *\r\n   * `// Uses <svg/> flags (3 megabytes):`\r\n   *\r\n   * `import flags from 'react-phone-number-input/flags'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: _propTypes2.default.objectOf(_propTypes2.default.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * country : string — The country code.\r\n   * * flagsPath : string — The `flagsPath` property (see above).\r\n   * * flags : object — The `flags` property (see above).\r\n   */\n  flagComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n   */\n  international: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Custom \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to hide country `<select/>`.\r\n   */\n  // (is `true` by default)\n  showCountrySelect: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * HTML `tabindex` attribute for country `<select/>`.\r\n   */\n  countrySelectTabIndex: _propTypes2.default.number,\n\n  /**\r\n   * HTML `aria-label` attribute for country `<select/>`.\r\n   * The default is `.country` of the `labels` property\r\n   * which is `\"Country\"` for the default `labels`.\r\n   */\n  countrySelectAriaLabel: _propTypes2.default.string,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptions: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: _propTypes2.default.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: _propTypes2.default.string,\n\n  /**\r\n   * Phone number `<input/>` CSS class.\r\n   */\n  inputClassName: _propTypes2.default.string,\n\n  /**\r\n   * Returns phone number `<input/>` CSS class string.\r\n   * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n   * @ignore\r\n   */\n  getInputClassName: _propTypes2.default.func,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name : string?` — HTML `name` attribute.\r\n   * * `value : string?` — The currently selected country code.\r\n   * * `onChange(value : string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n   * * `disabled : boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className : string` — CSS class name.\r\n   */\n  //\n  // (deprecated)\n  // * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n  // * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n  //\n  countrySelectComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   */\n  countrySelectProps: _propTypes2.default.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  numberInputComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: _propTypes2.default.object,\n\n  /**\r\n   * Phone number `<input/>` component (a higher-order one).\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n   * * `onChange(value? : string)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n   * * `metadata : object` — `libphonenumber-js` metadata.\r\n   * * `inputComponent : elementType` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\r\n   * * All other properties should be passed through to the underlying `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   *\r\n   * @ignore\r\n   */\n  inputComponent: _propTypes2.default.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to use `inputComponent={InputBasic}`\r\n   * instead of `input-format`'s `<ReactInput/>`.\r\n   */\n  // Is `false` by default.\n  // smartCaret : PropTypes.bool.isRequired,\n\n  /**\r\n   * Phone number extension `<input/>` element.\r\n   *\r\n   * Example:\r\n   *\r\n   *\t`ext={<input value={...} onChange={...}/>}`\r\n   */\n  ext: _propTypes2.default.node,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n   */\n  error: _propTypes2.default.string,\n\n  /**\r\n   * The `error` is shown only when `indicateInvalid` is `true`.\r\n   * (which is the default).\r\n   * @deprecated\r\n   * @ignore\r\n   */\n  indicateInvalid: _propTypes2.default.bool,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: _PropTypes.metadata.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: _propTypes2.default.func,\n\n  /**\r\n   * Disables only the phone number `<input/>`.\r\n   *\r\n   * Some users choose to implement a digital keyboard component for phone number input.\r\n   * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n   * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n   */\n  // (is `false` by default)\n  // https://github.com/catamphetamine/react-phone-number-input/issues/215\n  disablePhoneInput: _propTypes2.default.bool.isRequired\n}, _class2.defaultProps = {\n  /**\r\n   * Not disabled.\r\n   */\n  disabled: false,\n  disablePhoneInput: false,\n\n  /**\r\n   * Show `error` (if passed).\r\n   * @deprecated\r\n   */\n  indicateInvalid: true,\n\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: _Flag2.default,\n\n  /**\r\n   * By default, use icons from `flag-icon-css` github repo.\r\n   */\n  flagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon (globe).\r\n   */\n  // internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  numberInputComponent: 'input',\n\n  /**\r\n   * Phone number `<input/>` component (a higher-order one).\r\n   */\n  inputComponent: _InputBasic2.default,\n\n  /**\r\n   * Show country `<select/>`.\r\n   */\n  showCountrySelect: true,\n\n  /**\r\n   * Don't convert the initially passed phone number `value`\r\n   * to a national phone number for its country.\r\n   * The reason is that the newer generation grows up when\r\n   * there are no stationary phones and therefore everyone inputs\r\n   * phone numbers with a `+` in their smartphones\r\n   * so phone numbers written in international form\r\n   * are gradually being considered more natural than local ones.\r\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\r\n   * Set to `false` to use `inputComponent={InputBasic}`\r\n   * instead of `input-format`'s `<ReactInput/>`.\r\n   * Is `false` by default.\r\n   */\n  // smartCaret : false,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  international: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.isCountrySupportedWithError = function (country) {\n    var metadata = _this2.props.metadata;\n    return isCountrySupportedWithError(country, metadata);\n  };\n\n  this.onCountryChange = function (new_country) {\n    var _props2 = _this2.props,\n        metadata = _props2.metadata,\n        onChange = _props2.onChange;\n    var _state2 = _this2.state,\n        old_parsed_input = _state2.parsed_input,\n        old_country = _state2.country; // After the new `country` has been selected,\n    // if the phone number `<input/>` holds any digits\n    // then migrate those digits for the new `country`.\n\n    var new_parsed_input = (0, _inputControl.migrateParsedInputForNewCountry)(old_parsed_input, old_country, new_country, metadata, // Convert to \"local\" phone number format.\n    true);\n    var new_value = (0, _inputControl.e164)(new_parsed_input, new_country, metadata); // Focus phone number `<input/>` upon country selection.\n\n    _this2.focus(); // If the user has already manually selected a country\n    // then don't override that already selected country\n    // if the default `country` property changes.\n    // That's what `hasUserSelectedACountry` flag is for.\n\n\n    _this2.setState({\n      country: new_country,\n      hasUserSelectedACountry: true,\n      parsed_input: new_parsed_input,\n      value: new_value\n    }, function () {\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      onChange(new_value);\n    });\n  };\n\n  this.onPhoneNumberKeyDown = function (event) {\n    var onKeyDown = _this2.props.onKeyDown; // Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n    // (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n    // so can't hijack \"Down arrow\" keypress here.\n    // // Expand country `<select/>`` on \"Down arrow\" key press.\n    // if (event.keyCode === 40) {\n    // \tthis.country_select.toggle()\n    // }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  this.onChange = function (_input) {\n    var _props3 = _this2.props,\n        onChange = _props3.onChange,\n        international = _props3.international,\n        limitMaxLength = _props3.limitMaxLength,\n        metadata = _props3.metadata;\n\n    var _parseInput = (0, _inputControl.parseInput)(_input, _this2.state.parsed_input, _this2.state.country, _this2.state.countries, international, limitMaxLength, metadata),\n        input = _parseInput.input,\n        country = _parseInput.country,\n        value = _parseInput.value;\n\n    _this2.setState({\n      parsed_input: input,\n      value: value,\n      country: country\n    }, // Update the new `value` property.\n    // Doing it after the `state` has been updated\n    // because `onChange()` will trigger `getDerivedStateFromProps()`\n    // with the new `value` which will be compared to `state.value` there.\n    function () {\n      return onChange(value);\n    });\n  };\n\n  this._onFocus = function () {\n    return _this2.setState({\n      isFocused: true\n    });\n  };\n\n  this._onBlur = function () {\n    return _this2.setState({\n      isFocused: false\n    });\n  };\n\n  this.onFocus = function (event) {\n    var onFocus = _this2.props.onFocus;\n\n    _this2._onFocus();\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  this.onBlur = function (event) {\n    var onBlur = _this2.props.onBlur;\n    var value = _this2.state.value;\n\n    _this2._onBlur();\n\n    if (!onBlur) {\n      return;\n    } // `event` is React's `SyntheticEvent`.\n    // Its `.value` is read-only therefore cloning it.\n\n\n    var _event = _extends({}, event, {\n      target: _extends({}, event.target, {\n        value: value\n      }) // For `redux-form` event detection.\n      // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n    });\n\n    _event.stopPropagation = event.stopPropagation;\n    _event.preventDefault = event.preventDefault;\n    return onBlur(_event);\n  };\n\n  this.hidePhoneInputField = function (hide) {\n    _this2.setState({\n      hidePhoneInputField: hide\n    });\n  };\n\n  this.focus = function () {\n    return _this2.number_input.focus();\n  };\n\n  this.storeCountrySelectInstance = function (_) {\n    return _this2.country_select = _;\n  };\n\n  this.storePhoneNumberInputInstance = function (_) {\n    return _this2.number_input = _;\n  };\n}, _temp)) || _class; // Generates country `<select/>` options.\n\n\nexports.default = PhoneNumberInput;\n\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\n  var labels = props.labels,\n      international = props.international,\n      metadata = props.metadata;\n  var CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props);\n  return transformCountryOptions((0, _inputControl.getCountrySelectOptions)(countries || (0, _countries2.getCountryCodes)(labels).filter(function (country) {\n    return country === 'ZZ' || isCountrySupported(country, metadata);\n  }), labels, international).map(function (_ref) {\n    var value = _ref.value,\n        label = _ref.label;\n    return {\n      value: value,\n      label: label,\n      icon: CountrySelectOptionIcon\n    };\n  }), countryOptions);\n}\n\nfunction createCountrySelectOptionIconComponent(props) {\n  var flags = props.flags,\n      flagsPath = props.flagsPath,\n      FlagComponent = props.flagComponent,\n      InternationalIcon = props.internationalIcon;\n  return function (_ref2) {\n    var value = _ref2.value;\n    return _react2.default.createElement('div', {\n      className: (0, _classnames2.default)('react-phone-number-input__icon', {\n        'react-phone-number-input__icon--international': value === undefined\n      })\n    }, value ? _react2.default.createElement(FlagComponent, {\n      country: value,\n      flags: flags,\n      flagsPath: flagsPath\n    }) : _react2.default.createElement(InternationalIcon, null));\n  };\n} // Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\n\n\nfunction transformCountryOptions(options, transform) {\n  if (!transform) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return 'break';\n      _ref3 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return 'break';\n      _ref3 = _i.value;\n    }\n\n    var element = _ref3;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = transform, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref3;\n\n    var _ret = _loop();\n\n    if (_ret === 'break') break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\n\nfunction generateParsedInput(value, phoneNumber, props) {\n  var displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return (0, _inputControl.generateNationalNumberDigits)(phoneNumber);\n  }\n\n  return value;\n}\n\nfunction isCountrySupported(country, metadata) {\n  return metadata.countries.hasOwnProperty(country);\n}\n\nfunction isCountrySupportedWithError(country, metadata) {\n  if (isCountrySupported(country, metadata)) {\n    return true;\n  } else {\n    console.error('Country not found: ' + country);\n    return false;\n  }\n}\n\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\n  switch (countryOption) {\n    case '|':\n    case '...':\n    case '…':\n      return true;\n\n    default:\n      return isCountrySupportedWithError(countryOption, metadata);\n  }\n}\n\nfunction filterCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}\n\nfunction filterCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (countryOption) {\n      return isCountryOptionSupportedWithError(countryOption, metadata);\n    });\n\n    if (countryOptions.length === 0) {\n      countryOptions = undefined;\n    }\n  }\n\n  return countryOptions;\n}\n\nfunction parseExtDigits(event) {\n  if (event) {\n    if (typeof event === 'string') {\n      event = (0, _core.parseDigits)(event);\n    } else if (event.target && event.target.value) {\n      event.target.value = (0, _core.parseDigits)(event.target.value);\n    }\n  }\n\n  return event;\n}","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\nexport default function isPossibleNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error('Unknown country: ' + input.country);\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n    }\n  }\n\n  if (!metadata.possibleLengths()) {\n    throw new Error('Metadata too old');\n  }\n\n  return is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\nexport function is_possible_number(national_number, is_international, metadata) {\n  switch (checkNumberLengthForType(national_number, undefined, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !is_international\n\n    default:\n      return false;\n  }\n}","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\nvar defaultOptions = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return '' + formattedNumber + metadata.ext() + extension;\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _extends({}, defaultOptions, options);\n  } else {\n    options = defaultOptions;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country) {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error('Unknown country: ' + input.country);\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number = void 0;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = format_national_number(nationalNumber, 'NATIONAL', metadata);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '+' + countryCallingCode;\n      }\n\n      number = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n      number = '+' + countryCallingCode + ' ' + number;\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return '+' + countryCallingCode + nationalNumber;\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: '+' + countryCallingCode + nationalNumber,\n        ext: input.ext\n      });\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\n      if (!IDDPrefix) {\n        return;\n      }\n\n      if (options.humanReadable) {\n        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\n        if (formattedForSameCountryCallingCode) {\n          number = formattedForSameCountryCallingCode;\n        } else {\n          number = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n        }\n\n        return addExtension(number, input.ext, metadata, options.formatExtension);\n      }\n\n      return '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n    default:\n      throw new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n  }\n} // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return changeInternationalFormatStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n  var format = choose_format_for_number(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n  for (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref; // Validate leading digits\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (national_number.search(last_leading_digits_pattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(national_number, format.pattern())) {\n      return format;\n    }\n  }\n} // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport function changeInternationalFormatStyle(local) {\n  return local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n  var fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.\n\n  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (toCountryCallingCode === '1') {\n      return toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return format_national_number(number, 'NATIONAL', toCountryMetadata);\n  }\n}","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport function getIDDPrefix(country, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.country(country);\n\n  if (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\nexport function stripIDDPrefix(number, country, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.country(country);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // Some kind of a weird edge case.\n  // No explanation from Google given.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  /* istanbul ignore next */\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}","export { default as templateParser } from './modules/template parser';\nexport { default as templateFormatter } from './modules/template formatter';\nexport { default as ReactInput } from './modules/ReactInput';\nexport { default as parseDigit } from './modules/parse digit';\nexport { default as parse } from './modules/parse';\nexport { default as format } from './modules/format';\nexport { onChange, onPaste, onCut, onKeyDown } from './modules/input control';","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('./parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('./input control');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\n\nvar ReactInput = (_temp2 = _class = function (_React$Component) {\n  _inherits(ReactInput, _React$Component);\n\n  function ReactInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ReactInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactInput.__proto__ || Object.getPrototypeOf(ReactInput)).call.apply(_ref, [this].concat(args))), _this), _this.storeInstance = function (instance) {\n      _this.input = instance;\n    }, _this.getInputElement = function () {\n      return _this.input;\n    }, _this.onChange = function (event) {\n      var _this$props = _this.props,\n          parse = _this$props.parse,\n          format = _this$props.format;\n      return (0, _inputControl.onChange)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onPaste = function (event) {\n      var _this$props2 = _this.props,\n          parse = _this$props2.parse,\n          format = _this$props2.format;\n      return (0, _inputControl.onPaste)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onCut = function (event) {\n      var _this$props3 = _this.props,\n          parse = _this$props3.parse,\n          format = _this$props3.format;\n      return (0, _inputControl.onCut)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _this.onBlur = function (event) {\n      var _this$props4 = _this.props,\n          parse = _this$props4.parse,\n          onBlur = _this$props4.onBlur; // This `onBlur` interceptor is a workaround for `redux-form`,\n      // so that it gets the right (parsed, not the formatted one)\n      // `event.target.value` in its `onBlur` handler.\n\n      if (onBlur) {\n        var _event = _extends({}, event, {\n          target: _extends({}, event.target, {\n            value: (0, _parse3.default)(_this.getInputElement().value, undefined, parse).value\n          }) // For `redux-form` event detection.\n          // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n        });\n\n        _event.stopPropagation = event.stopPropagation;\n        _event.preventDefault = event.preventDefault;\n        onBlur(_event);\n      }\n    }, _this.onKeyDown = function (event) {\n      var _this$props5 = _this.props,\n          parse = _this$props5.parse,\n          format = _this$props5.format;\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(event);\n      }\n\n      return (0, _inputControl.onKeyDown)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ReactInput, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          value = _props.value,\n          parse = _props.parse,\n          format = _props.format,\n          inputComponent = _props.inputComponent,\n          rest = _objectWithoutProperties(_props, ['value', 'parse', 'format', 'inputComponent']); // Non-string `inputComponent`s would work in this case\n      // but it would also introduce a caret reset bug:\n      // the caret position would reset on each input.\n      // The origins of this bug are unknown, they may be\n      // somehow related to the `ref` property\n      // being intercepted by React here.\n\n\n      return _react2.default.createElement(inputComponent, _extends({}, rest, {\n        ref: this.storeInstance,\n        value: format(isEmpty(value) ? '' : value).text,\n        onKeyDown: this.onKeyDown,\n        onChange: this.onChange,\n        onPaste: this.onPaste,\n        onCut: this.onCut,\n        onBlur: this.onBlur\n      }));\n    }\n    /**\r\n     * Returns `<input/>` DOM Element.\r\n     * @return {DOMElement}\r\n     */\n    // This handler is a workaround for `redux-form`.\n\n  }, {\n    key: 'focus',\n\n    /**\r\n     * Focuses the `<input/>`.\r\n     * Can be called manually.\r\n     */\n    value: function focus() {\n      this.getInputElement().focus();\n    }\n  }]);\n\n  return ReactInput;\n}(_react2.default.Component), _class.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: _propTypes2.default.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: _propTypes2.default.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: _propTypes2.default.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: _propTypes2.default.string.isRequired,\n  // Is parsed from <input/> text.\n  value: _propTypes2.default.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: _propTypes2.default.func.isRequired,\n  // This `onBlur` interceptor is a workaround for `redux-form`,\n  // so that it gets the parsed `value` in its `onBlur` handler,\n  // not the formatted text.\n  onBlur: _propTypes2.default.func,\n  // Passthrough\n  onKeyDown: _propTypes2.default.func\n}, _class.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n}, _temp2);\nexports.default = ReactInput;\n\nfunction isEmpty(value) {\n  return value === undefined || value === null;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.count_occurences = count_occurences; // Counts all occurences of a symbol in a string\n\nfunction count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _metadataMin = require('libphonenumber-js/metadata.min.json');\n\nvar _metadataMin2 = _interopRequireDefault(_metadataMin);\n\nvar _PhoneInputNativeDefaults = require('./PhoneInputNativeDefaults');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Deprecated.\n// This is a file used in legacy `/index.js` export entry.\n// In some next major version this file will be removed\n// and `/index.js` will be redirected to `/min/index.js`.\n\n\nexports.default = (0, _PhoneInputNativeDefaults.createPhoneInput)(_metadataMin2.default);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.labels = exports.metadata = undefined;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar metadata = exports.metadata = _propTypes2.default.shape({\n  country_calling_codes: _propTypes2.default.object.isRequired,\n  countries: _propTypes2.default.object.isRequired\n});\n\nvar labels = exports.labels = _propTypes2.default.objectOf(_propTypes2.default.string);","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  } // Binding \"this\" is important for shallow renderer support.\n\n\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n} // React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\n\n\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {\n    return Component;\n  } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n\n\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n\n  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n    throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') + '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://fb.me/react-async-component-lifecycle-hooks');\n  } // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n\n\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  } // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n\n\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCountryCodes = getCountryCodes;\nexports.getCountryCodeForFlag = getCountryCodeForFlag; // See the table of officially assigned ISO 3166-1 alpha-2 country codes:\n// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes\n\nvar SKIP_COUNTRIES = exports.SKIP_COUNTRIES = [// \"001\" means \"Non-Geographical Entity\" (\"No country\", \"International\").\n'001'];\n\nfunction getCountryCodes(labels) {\n  // Includes all country codes (excluding \"ZZ\" for \"International\").\n  //\n  // From ISO 3166-1:2006(E/F):\n  //\n  // 8.1.3   User-assigned code elements\n  //\n  // If users need code elements to represent country names not included\n  // in this part of ISO 3166, the series of letters AA, QM to QZ, XA\n  // to XZ, and ZZ, and the series AAA to AAZ, QMA to QZZ, XAA to XZZ,\n  // and ZZA to ZZZ respectively, and the series of numbers 900 to 999\n  // are available. These users should inform the ISO 3166/MA of such use.\n  //\n  return Object.keys(labels).filter(function (key) {\n    return key.length === 2 && key.toUpperCase() === key && key !== 'ZZ' && SKIP_COUNTRIES.indexOf(key) < 0;\n  });\n}\n\nfunction getCountryCodeForFlag(country) {\n  switch (country) {\n    // \"Ascension Island\".\n    // The flag is missing for it:\n    // https://lipis.github.io/flag-icon-css/flags/4x3/ac.svg\n    // GitHub issue:\n    // https://github.com/lipis/flag-icon-css/issues/537\n    // Using \"SH\" flag as a temporary substitute\n    // because previously \"AC\" and \"TA\" were parts of \"SH\".\n    case 'AC':\n      return 'SH';\n    // \"Tristan da Cunha\".\n    // The flag is missing for it:\n    // https://lipis.github.io/flag-icon-css/flags/4x3/ta.svg\n    // GitHub issue:\n    // https://github.com/lipis/flag-icon-css/issues/537\n    // Using \"SH\" flag as a temporary substitute\n    // because previously \"AC\" and \"TA\" were parts of \"SH\".\n\n    case 'TA':\n      return 'SH';\n\n    default:\n      return country;\n  }\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parsePhoneNumber;\n\nvar _parsePhoneNumber = require('./parsePhoneNumber');\n\nvar _parsePhoneNumber2 = _interopRequireDefault(_parsePhoneNumber);\n\nvar _metadataMin = require('libphonenumber-js/metadata.min.json');\n\nvar _metadataMin2 = _interopRequireDefault(_metadataMin);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Deprecated.\n// This is a file used in the legacy root `/index.js` export file.\n// (importing directly from `react-phone-number-input` is currently deprecated)\n// In some next major version this file will be removed\n// and `main` and `module` entries in `package.json` will be\n// redirected to `/min/index.js` and `/min/index.commonjs.js`\n// which don't import this file.\n\n\nfunction parsePhoneNumber() {\n  var parameters = Array.prototype.slice.call(arguments);\n  parameters.push(_metadataMin2.default);\n  return _parsePhoneNumber2.default.apply(this, parameters);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValidPhoneNumber;\n\nvar _isValidPhoneNumber = require('./isValidPhoneNumber');\n\nvar _isValidPhoneNumber2 = _interopRequireDefault(_isValidPhoneNumber);\n\nvar _metadataMin = require('libphonenumber-js/metadata.min.json');\n\nvar _metadataMin2 = _interopRequireDefault(_metadataMin);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Deprecated.\n// This is a file used in the legacy root `/index.js` export file.\n// (importing directly from `react-phone-number-input` is currently deprecated)\n// In some next major version this file will be removed\n// and `main` and `module` entries in `package.json` will be\n// redirected to `/min/index.js` and `/min/index.commonjs.js`\n// which don't import this file.\n\n\nfunction isValidPhoneNumber() {\n  var parameters = Array.prototype.slice.call(arguments);\n  parameters.push(_metadataMin2.default);\n  return _isValidPhoneNumber2.default.apply(this, parameters);\n}","export { default } from '../modules/InternationalIcon';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * By default, it maps the variant to a good default headline component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * We are empirically mapping the variant prop to a range of different DOM element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport isMuiElement from '../utils/isMuiElement';\nimport useForkRef from '../utils/useForkRef';\nimport ListContext from '../List/ListContext';\nimport ReactDOM from 'react-dom';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n    root: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      position: 'relative',\n      textDecoration: 'none',\n      width: '100%',\n      boxSizing: 'border-box',\n      textAlign: 'left',\n      paddingTop: 8,\n      paddingBottom: 8,\n      '&$focusVisible': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$selected, &$selected:hover': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$disabled': {\n        opacity: 0.5\n      }\n    },\n\n    /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */\n    container: {\n      position: 'relative'\n    },\n\n    /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */\n    focusVisible: {},\n\n    /* Styles applied to the `component` element if dense. */\n    dense: {\n      paddingTop: 4,\n      paddingBottom: 4\n    },\n\n    /* Styles applied to the `component` element if `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      alignItems: 'flex-start'\n    },\n\n    /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the inner `component` element if `divider={true}`. */\n    divider: {\n      borderBottom: \"1px solid \".concat(theme.palette.divider),\n      backgroundClip: 'padding-box'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the inner `component` element if `button={true}`. */\n    button: {\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: theme.palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */\n    secondaryAction: {\n      // Add some space to avoid collision as `ListItemSecondaryAction`\n      // is absolutely positioned.\n      paddingRight: 48\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {}\n  };\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n */\n\nvar ListItem = React.forwardRef(function ListItem(props, ref) {\n  var _props$alignItems = props.alignItems,\n      alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$button = props.button,\n      button = _props$button === void 0 ? false : _props$button,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      componentProp = props.component,\n      _props$ContainerCompo = props.ContainerComponent,\n      ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,\n      _props$ContainerProps = props.ContainerProps;\n  _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;\n\n  var ContainerClassName = _props$ContainerProps.className,\n      ContainerProps = _objectWithoutProperties(_props$ContainerProps, [\"className\"]),\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$divider = props.divider,\n      divider = _props$divider === void 0 ? false : _props$divider,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"alignItems\", \"autoFocus\", \"button\", \"children\", \"classes\", \"className\", \"component\", \"ContainerComponent\", \"ContainerProps\", \"dense\", \"disabled\", \"disableGutters\", \"divider\", \"focusVisibleClassName\", \"selected\"]);\n\n  var context = React.useContext(ListContext);\n  var childContext = {\n    dense: dense || context.dense || false,\n    alignItems: alignItems\n  };\n  var listItemRef = React.useRef(null);\n  useEnhancedEffect(function () {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('Material-UI: unable to set focus to a ListItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  var children = React.Children.toArray(childrenProp);\n  var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    listItemRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(handleOwnRef, ref);\n\n  var componentProps = _extends({\n    className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== \"center\" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),\n    disabled: disabled\n  }, other);\n\n  var Component = componentProp || 'li';\n\n  if (button) {\n    componentProps.component = componentProp || 'div';\n    componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);\n    Component = ButtonBase;\n  }\n\n  if (hasSecondaryAction) {\n    // Use div by default.\n    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.\n\n    if (ContainerComponent === 'li') {\n      if (Component === 'li') {\n        Component = 'div';\n      } else if (componentProps.component === 'li') {\n        componentProps.component = 'div';\n      }\n    }\n\n    return React.createElement(ListContext.Provider, {\n      value: childContext\n    }, React.createElement(ContainerComponent, _extends({\n      className: clsx(classes.container, ContainerClassName),\n      ref: handleRef\n    }, ContainerProps), React.createElement(Component, componentProps, children), children.pop()));\n  }\n\n  return React.createElement(ListContext.Provider, {\n    value: childContext\n  }, React.createElement(Component, _extends({\n    ref: handleRef\n  }, componentProps), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItem.propTypes = {\n  /**\n   * Defines the `align-items` style property.\n   */\n  alignItems: PropTypes.oneOf(['flex-start', 'center']),\n\n  /**\n   * If `true`, the list item will be focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the list item will be a button (using `ButtonBase`). Props intended\n   * for `ButtonBase` can then be applied to `ListItem`.\n   */\n  button: PropTypes.bool,\n\n  /**\n   * The content of the component. If a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    var children = React.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n\n    var secondaryActionIndex = -1;\n\n    for (var i = children.length - 1; i >= 0; i -= 1) {\n      var child = children[i];\n\n      if (isMuiElement(child, ['ListItemSecondaryAction'])) {\n        secondaryActionIndex = i;\n        break;\n      }\n    } //  is ListItemSecondaryAction the last child of ListItem\n\n\n    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n      return new Error('Material-UI: you used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The container component used when a `ListItemSecondaryAction` is the last child.\n   */\n  ContainerComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the container component if used.\n   */\n  ContainerProps: PropTypes.object,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, the list item will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   */\n  divider: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * Use to apply selected styling.\n   */\n  selected: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItem'\n})(ListItem);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes = {\n  /**\n   * Alias for the `primary` property.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * If `true`, the children will be indented.\n   * This should be used if there is no left avatar or left icon.\n   */\n  inset: PropTypes.bool,\n\n  /**\n   * The main content element.\n   */\n  primary: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  primaryTypographyProps: PropTypes.object,\n\n  /**\n   * The secondary content element.\n   */\n  secondary: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  secondaryTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = edit; // Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\n\nfunction edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = close_braces;\n\nvar _helpers = require('./helpers');\n\nfunction close_braces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = (0, _helpers.count_occurences)('(', retained_template);\n  var closing_braces = (0, _helpers.count_occurences)(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n} //# sourceMappingURL=close braces.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSelection = getSelection;\nexports.getOperation = getOperation;\nexports.getCaretPosition = getCaretPosition;\nexports.setCaretPosition = setCaretPosition; // Gets <input/> selection bounds\n\nfunction getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\n\nvar Keys = exports.Keys = {\n  Backspace: 8,\n  Delete: 46 // Finds out the operation to be intercepted and performed\n  // based on the key down event `keyCode`.\n\n};\n\nfunction getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\n\nfunction getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\n\nfunction setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.createPhoneInput = createPhoneInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _default = require('../locale/default.json');\n\nvar _default2 = _interopRequireDefault(_default);\n\nvar _InternationalIcon = require('./InternationalIcon');\n\nvar _InternationalIcon2 = _interopRequireDefault(_InternationalIcon);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _PhoneInputNative = require('./PhoneInputNative');\n\nvar _PhoneInputNative2 = _interopRequireDefault(_PhoneInputNative);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction createPhoneInput(defaultMetadata) {\n  var _class, _temp2;\n\n  return _temp2 = _class = function (_Component) {\n    _inherits(PhoneInputNativeDefaults, _Component);\n\n    function PhoneInputNativeDefaults() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, PhoneInputNativeDefaults);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNativeDefaults.__proto__ || Object.getPrototypeOf(PhoneInputNativeDefaults)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n        return _this.input = ref;\n      }, _this.render = function () {\n        return _react2.default.createElement(_PhoneInputNative2.default, _extends({\n          ref: _this.storeInputRef\n        }, _this.props));\n      }, _this.focus = function () {\n        return _this.input.focus();\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return PhoneInputNativeDefaults;\n  }(_react.Component), _class.propTypes = {\n    metadata: _PropTypes.metadata.isRequired,\n    labels: _PropTypes.labels.isRequired,\n    internationalIcon: _propTypes2.default.elementType.isRequired\n  }, _class.defaultProps = {\n    metadata: defaultMetadata,\n    labels: _default2.default,\n    internationalIcon: _InternationalIcon2.default\n  }, _temp2;\n}\n\nexports.default = createPhoneInput();","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PhoneInput = require('./PhoneInput');\n\nvar _PhoneInput2 = _interopRequireDefault(_PhoneInput);\n\nvar _CountrySelectNative = require('./CountrySelectNative');\n\nvar _CountrySelectNative2 = _interopRequireDefault(_CountrySelectNative);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PhoneInputNative = (_temp2 = _class = function (_Component) {\n  _inherits(PhoneInputNative, _Component);\n\n  function PhoneInputNative() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, PhoneInputNative);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNative.__proto__ || Object.getPrototypeOf(PhoneInputNative)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n      return _this.input = ref;\n    }, _this.focus = function () {\n      return _this.input.focus();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // These two country-select-related properties are\n  // implemented as `defaultProps` instead of passing them\n  // directly to the `<PhoneInput/>` because `<PhoneInputNative/>`\n  // is the default export of this library and therefore people pass\n  // `countrySelectComponent` property to this `<PhoneInputNative/>` component\n  // and when they don't see any changes they might get confused.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/229\n\n\n  _createClass(PhoneInputNative, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(_PhoneInput2.default, _extends({\n        ref: this.storeInputRef\n      }, this.props));\n    } // Proxy `.focus()` method.\n\n  }]);\n\n  return PhoneInputNative;\n}(_react.Component), _class.propTypes = {\n  // (optional)\n  // Replaces the default country select arrow.\n  countrySelectArrowComponent: _propTypes2.default.elementType\n}, _class.defaultProps = {\n  countrySelectComponent: _CountrySelectNative2.default,\n  countrySelectProperties: COUNTRY_SELECT_PROPERTIES\n}, _temp2);\nexports.default = PhoneInputNative;\nvar COUNTRY_SELECT_PROPERTIES = {\n  countrySelectArrowComponent: 'selectArrowComponent'\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  var InputBasic = function (_PureComponent) {\n    _inherits(InputBasic, _PureComponent);\n\n    function InputBasic() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, InputBasic);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputBasic.__proto__ || Object.getPrototypeOf(InputBasic)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onChange = function (event) {\n        var onChange = _this.props.onChange;\n        var value = _this.state.value;\n        var newValue = (0, _core.parseIncompletePhoneNumber)(event.target.value); // By default, if a value is something like `\"(123)\"`\n        // then Backspace would only erase the rightmost brace\n        // becoming something like `\"(123\"`\n        // which would give the same `\"123\"` value\n        // which would then be formatted back to `\"(123)\"`\n        // and so a user wouldn't be able to erase the phone number.\n        // Working around this issue with this simple hack.\n\n        if (newValue === value) {\n          if (_this.format(newValue).indexOf(event.target.value) === 0) {\n            // Trim the last digit (or plus sign).\n            newValue = newValue.slice(0, -1);\n          }\n        } // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        _this.setState({\n          value: newValue\n        }, function () {\n          return onChange(newValue);\n        });\n      }, _this.onBlur = function (event) {\n        var onBlur = _this.props.onBlur;\n        var value = _this.state.value;\n\n        if (onBlur) {\n          // `event` is React's `SyntheticEvent`.\n          // Its `.value` is read-only therefore cloning it.\n          var _event = _extends({}, event, {\n            target: _extends({}, event.target, {\n              value: value\n            }) // Workaround for `redux-form` event detection.\n            // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n          });\n\n          _event.stopPropagation = event.stopPropagation;\n          _event.preventDefault = event.preventDefault;\n          return onBlur(_event);\n        }\n      }, _this.focus = function () {\n        return _this.input.focus();\n      }, _this.storeInput = function (ref) {\n        return _this.input = ref;\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(InputBasic, [{\n      key: 'format',\n      value: function format(value) {\n        var _props = this.props,\n            country = _props.country,\n            metadata = _props.metadata;\n        return (0, _core.formatIncompletePhoneNumber)(value, country, metadata);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props2 = this.props,\n            onChange = _props2.onChange,\n            onFocus = _props2.onFocus,\n            country = _props2.country,\n            metadata = _props2.metadata,\n            Input = _props2.inputComponent,\n            rest = _objectWithoutProperties(_props2, ['onChange', 'onFocus', 'country', 'metadata', 'inputComponent']); // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        var value = this.state.value; // Deprecated. Should be removed in a future major version release.\n        // `type=\"tel\"` and `autoComplete=\"tel\"` properties are here\n        // just for the \"Without country select\" component exported from\n        // `react-phone-number-input/basic-input` subpackage.\n        // These two properties will be overwritten by `<PhoneInput/>` properties\n        // when not used as a \"Without country select\" component.\n\n        return _react2.default.createElement(Input, _extends({\n          type: 'tel',\n          autoComplete: 'tel'\n        }, rest, {\n          ref: this.storeInput,\n          value: this.format(value),\n          onChange: this.onChange,\n          onFocus: onFocus,\n          onBlur: this.onBlur\n        }));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      // Prevents React from resetting the `<input/>` caret position.\n      // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n      // https://github.com/facebook/react/issues/955\n      value: function getDerivedStateFromProps(_ref2) {\n        var value = _ref2.value;\n        return {\n          value: value\n        };\n      } // This `onBlur` interceptor is a workaround for `redux-form`'s bug\n      // so that it gets the up-to-date `value` in its `onBlur` handler.\n      // Without this fix it just gets the actual (raw) input field textual value.\n      // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n      //\n      // New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n      // https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n      // `redux-form` shouldn't have taken the new `value` from `event`.\n      //\n      // A developer is not supposed to pass this `onBlur` property manually.\n      // Instead, `redux-form` passes `onBlur` to this component automatically\n      // and this component patches that `onBlur` handler (a hacky way but works).\n      //\n\n    }]);\n\n    return InputBasic;\n  }(PureComponent);\n\n  InputBasic.propTypes = {\n    // The parsed phone number.\n    // \"Parsed\" not in a sense of \"E.164\"\n    // but rather in a sense of \"having only\n    // digits and possibly a leading plus character\".\n    // Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n    value: _propTypes2.default.string.isRequired,\n    // Updates the `value`.\n    onChange: _propTypes2.default.func.isRequired,\n    // Toggles the `--focus` CSS class.\n    // https://github.com/catamphetamine/react-phone-number-input/issues/189\n    onFocus: _propTypes2.default.func,\n    // `onBlur` workaround for `redux-form`'s bug.\n    onBlur: _propTypes2.default.func,\n    // A two-letter country code for formatting `value`\n    // as a national phone number (e.g. `(800) 555 35 35`).\n    // E.g. \"US\", \"RU\", etc.\n    // If no `country` is passed then `value`\n    // is formatted as an international phone number.\n    // (e.g. `+7 800 555 35 35`)\n    country: _propTypes2.default.string,\n    // `libphonenumber-js` metadata.\n    metadata: _propTypes2.default.object.isRequired,\n    // The `<input/>` component.\n    inputComponent: _propTypes2.default.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return (0, _reactLifecyclesCompat.polyfill)(InputBasic);\n}\n\nexports.default = createInput();","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _countries = require('./countries');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\n\nvar FlagComponent = function FlagComponent(_ref) {\n  var country = _ref.country,\n      flags = _ref.flags,\n      flagsPath = _ref.flagsPath,\n      className = _ref.className;\n\n  if (flags && flags[country]) {\n    return flags[country]();\n  }\n\n  return _react2.default.createElement('img', {\n    alt: country,\n    className: 'react-phone-number-input__icon-image',\n    src: '' + flagsPath + (0, _countries.getCountryCodeForFlag)(country).toLowerCase() + '.svg'\n  });\n};\n\nFlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: _propTypes2.default.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `flag-icon-css` github repo.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: _propTypes2.default.objectOf(_propTypes2.default.elementType),\n  // A base URL path for national flag SVG icons.\n  // By default it uses the ones from `flag-icon-css` github repo.\n  flagsPath: _propTypes2.default.string.isRequired\n};\nexports.default = FlagComponent;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPreSelectedCountry = getPreSelectedCountry;\nexports.getCountrySelectOptions = getCountrySelectOptions;\nexports.parsePhoneNumber = parsePhoneNumber;\nexports.generateNationalNumberDigits = generateNationalNumberDigits;\nexports.migrateParsedInputForNewCountry = migrateParsedInputForNewCountry;\nexports.e164 = e164;\nexports.trimNumber = trimNumber;\nexports.getCountryForPartialE164Number = getCountryForPartialE164Number;\nexports.parseInput = parseInput;\nexports.get_country_from_possibly_incomplete_international_phone_number = get_country_from_possibly_incomplete_international_phone_number;\nexports.compare_strings = compare_strings;\nexports.strip_country_calling_code = strip_country_calling_code;\nexports.get_national_significant_number_part = get_national_significant_number_part;\nexports.could_number_belong_to_country = could_number_belong_to_country;\n\nvar _core = require('libphonenumber-js/core');\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\n\nfunction getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata) {\n  // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && !includeInternationalOption && countries && countries.length > 0) {\n    country = countries[0];\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\n\nfunction getCountrySelectOptions(countries, country_names, includeInternationalOption) {\n  // Generates a `<Select/>` option for each country.\n  var country_select_options = countries.map(function (country) {\n    return {\n      value: country,\n      label: country_names[country]\n    };\n  }); // Sort the list of countries alphabetically.\n\n  country_select_options.sort(function (a, b) {\n    return compare_strings(a.label, b.label);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (includeInternationalOption) {\n    country_select_options.unshift({\n      label: country_names.ZZ\n    });\n  }\n\n  return country_select_options;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\n\nfunction parsePhoneNumber(value, metadata) {\n  return (0, _core.parsePhoneNumberFromString)(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\n\nfunction generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\n\nfunction migrateParsedInputForNewCountry(value, previous_country, new_country, metadata, preferNationalFormat) {\n  // If `parsed_input` is empty\n  // then no need to migrate anything.\n  if (!value) {\n    return value;\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `value` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (new_country) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (value[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (preferNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\n        // if (derived_country === new_country)\n        // {\n        // \treturn strip_country_calling_code(value, derived_country, metadata)\n        // }\n        // Simply strip the leading `+` character\n        // therefore simply converting all digits into a \"local\" phone number.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        return value.slice(1);\n      } // If the international phone number already contains\n      // any country calling code then trim the country calling code part.\n      // (that could also be the newly selected country phone code prefix as well)\n      // `value` doesn't neccessarily belong to `previous_country`.\n      // (e.g. if a user enters an international number\n      //  not belonging to any of the reduced `countries` list).\n\n\n      value = strip_country_calling_code(value, previous_country, metadata); // Prepend country calling code prefix\n      // for the newly selected country.\n\n      return e164(value, new_country, metadata) || '+' + (0, _core.getCountryCallingCode)(new_country, metadata);\n    }\n  } // If switching to \"International\" from a country.\n  else {\n      // If the phone number was entered in national format.\n      if (value[0] !== '+') {\n        // Format the national phone number as an international one.\n        // The phone number entered not necessarily even starts with\n        // the previously selected country phone prefix.\n        // Even if the phone number belongs to whole another country\n        // it will still be parsed into some national phone number.\n        return e164(value, previous_country, metadata) || '';\n      }\n    }\n\n  return value;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // If there are any digits then the `value` is returned as is.\n\n\n    return number;\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = get_national_significant_number_part(number, country, metadata);\n\n  if (partial_national_significant_number) {\n    return '+' + (0, _core.getCountryCallingCode)(country, metadata) + partial_national_significant_number;\n  }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\n\nfunction trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = get_national_significant_number_part(number, country, metadata);\n  var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n  if (overflowDigitsCount > 0) {\n    return number.slice(0, number.length - overflowDigitsCount);\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new _core.Metadata(metadata);\n  metadata.country(country); // Return the last \"possible length\".\n\n  return metadata.possibleLengths()[metadata.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction getCountryForPartialE164Number(partialE164Number, country, countries, includeInternationalOption, metadata) {\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && includeInternationalOption && !could_number_belong_to_country(partialE164Number, country, metadata)) {\n      return undefined;\n    } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\n\nfunction parseInput(input, prevInput, country, countries, includeInternationalOption, limitMaxLength, metadata) {\n  // Trim the input to not exceed the maximum possible number length.\n  if (input && country && limitMaxLength) {\n    input = trimNumber(input, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n\n\n  if (input && !country && input[0] !== '+') {\n    input = '+' + input;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!input && prevInput && prevInput[0] === '+') {\n    country = undefined;\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value = void 0;\n\n  if (input) {\n    if (input[0] === '+') {\n      if (input !== '+') {\n        value = input;\n      }\n    } else {\n      value = e164(input, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, country, countries, includeInternationalOption, metadata);\n  }\n\n  return {\n    input: input,\n    country: country,\n    value: value\n  };\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n  var formatter = new _core.AsYouType(null, metadata);\n  formatter.input(number); // `001` is a special \"non-geograpical entity\" code\n  // in Google's `libphonenumber` library.\n\n  if (formatter.country === '001') {\n    return;\n  }\n\n  return formatter.country;\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\n\n\nfunction compare_strings(a, b) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\n\nfunction strip_country_calling_code(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var country_calling_prefix = '+' + (0, _core.getCountryCallingCode)(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < country_calling_prefix.length) {\n      if (country_calling_prefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(country_calling_prefix) === 0) {\n        return number.slice(country_calling_prefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _iterator = Object.keys(metadata.country_calling_codes), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country_calling_code = _ref;\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\n\nfunction get_national_significant_number_part(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new _core.AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  return formatter.getNationalNumber();\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\n\nfunction could_number_belong_to_country(number, country, metadata) {\n  var country_calling_code = (0, _core.getCountryCallingCode)(country, metadata);\n  var i = 0;\n\n  while (i + 1 < number.length && i < country_calling_code.length) {\n    if (number[i + 1] !== country_calling_code[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CountrySelectNative = (_temp2 = _class = function (_Component) {\n  _inherits(CountrySelectNative, _Component);\n\n  function CountrySelectNative() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CountrySelectNative);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CountrySelectNative.__proto__ || Object.getPrototypeOf(CountrySelectNative)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (event) {\n      var onChange = _this.props.onChange;\n      var value = event.target.value;\n      onChange(value === 'ZZ' ? undefined : value);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(CountrySelectNative, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          name = _props.name,\n          value = _props.value,\n          options = _props.options,\n          onFocus = _props.onFocus,\n          onBlur = _props.onBlur,\n          disabled = _props.disabled,\n          tabIndex = _props.tabIndex,\n          className = _props.className,\n          SelectArrow = _props.selectArrowComponent;\n      var selectedOption = void 0;\n\n      for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var option = _ref2;\n\n        if (!option.divider && option.value === value) {\n          selectedOption = option;\n        }\n      }\n\n      return _react2.default.createElement('div', {\n        className: (0, _classnames2.default)(className, 'react-phone-number-input__country--native')\n      }, selectedOption && _react2.default.createElement(selectedOption.icon, {\n        value: value\n      }), _react2.default.createElement('select', {\n        name: name,\n        value: value || 'ZZ',\n        onChange: this.onChange,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        disabled: disabled,\n        tabIndex: tabIndex,\n        'aria-label': this.props['aria-label'],\n        className: 'react-phone-number-input__country-select'\n      }, options.map(function (_ref3) {\n        var value = _ref3.value,\n            label = _ref3.label,\n            divider = _ref3.divider;\n        return _react2.default.createElement('option', {\n          key: divider ? '|' : value || 'ZZ',\n          value: divider ? '|' : value || 'ZZ',\n          disabled: divider ? true : false,\n          className: divider ? 'react-phone-number-input__country-select-divider' : undefined\n        }, label);\n      })), _react2.default.createElement(SelectArrow, null));\n    }\n  }]);\n\n  return CountrySelectNative;\n}(_react.Component), _class.propTypes = {\n  // A two-letter country code.\n  // E.g. \"US\", \"RU\", etc.\n  value: _propTypes2.default.string,\n  // Updates the `value`.\n  onChange: _propTypes2.default.func.isRequired,\n  // `<select/>` options.\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    value: _propTypes2.default.string,\n    label: _propTypes2.default.string,\n    divider: _propTypes2.default.bool\n  })).isRequired,\n  // HTML `name` attribute.\n  name: _propTypes2.default.string,\n  // HTML `disabled` attribute.\n  disabled: _propTypes2.default.bool,\n  // HTML `tabIndex` attribute.\n  tabIndex: _propTypes2.default.number,\n  // Select arrow component.\n  selectArrowComponent: _propTypes2.default.elementType.isRequired,\n  // Toggles the `--focus` CSS class.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/189\n  onFocus: _propTypes2.default.func,\n  // Toggles the `--focus` CSS class.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/189\n  onBlur: _propTypes2.default.func\n}, _class.defaultProps = {\n  selectArrowComponent: function selectArrowComponent() {\n    return _react2.default.createElement('div', {\n      className: 'react-phone-number-input__country-select-arrow'\n    });\n  }\n}, _temp2);\nexports.default = CountrySelectNative;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = require('libphonenumber-js/core');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _core.parsePhoneNumberFromString;\n  }\n});","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValidPhoneNumber;\n\nvar _core = require('libphonenumber-js/core');\n\nfunction isValidPhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = (0, _core.parsePhoneNumberFromString)(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isValid();\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    this.v1 = !metadata.version;\n    this.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n    this.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n  }\n\n  _createClass(Metadata, [{\n    key: 'getCountries',\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries);\n    }\n  }, {\n    key: 'hasCountry',\n    value: function hasCountry(country) {\n      return this.metadata.countries[country] !== undefined;\n    }\n  }, {\n    key: 'country',\n    value: function country(_country) {\n      if (!_country) {\n        this._country = undefined;\n        this.country_metadata = undefined;\n        return this;\n      }\n\n      if (!this.hasCountry(_country)) {\n        throw new Error('Unknown country: ' + _country);\n      }\n\n      this._country = _country;\n      this.country_metadata = this.metadata.countries[_country];\n      return this;\n    }\n  }, {\n    key: 'getDefaultCountryMetadataForRegion',\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n    }\n  }, {\n    key: 'countryCallingCode',\n    value: function countryCallingCode() {\n      return this.country_metadata[0];\n    }\n  }, {\n    key: 'IDDPrefix',\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.country_metadata[1];\n    }\n  }, {\n    key: 'defaultIDDPrefix',\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.country_metadata[12];\n    }\n  }, {\n    key: 'nationalNumberPattern',\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.country_metadata[1];\n      return this.country_metadata[2];\n    }\n  }, {\n    key: 'possibleLengths',\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.country_metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: '_getFormats',\n    value: function _getFormats(country_metadata) {\n      return country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'formats',\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: 'nationalPrefix',\n    value: function nationalPrefix() {\n      return this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: '_getNationalPrefixFormattingRule',\n    value: function _getNationalPrefixFormattingRule(country_metadata) {\n      return country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'nationalPrefixFormattingRule',\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: 'nationalPrefixForParsing',\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n    }\n  }, {\n    key: 'nationalPrefixTransformRule',\n    value: function nationalPrefixTransformRule() {\n      return this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: '_getNationalPrefixIsOptionalWhenFormatting',\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when parsing\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: 'nationalPrefixIsOptionalWhenFormatting',\n    value: function nationalPrefixIsOptionalWhenFormatting() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: 'leadingDigits',\n    value: function leadingDigits() {\n      return this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: 'types',\n    value: function types() {\n      return this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: 'hasTypes',\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      if (this.hasTypes() && getType(this.types(), _type)) {\n        return new Type(getType(this.types(), _type), this);\n      }\n    }\n  }, {\n    key: 'ext',\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }, {\n    key: 'countryCallingCodes',\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n    //\n    // `country_calling_code` is always valid.\n    // But the actual country may not necessarily be part of the metadata.\n    //\n\n  }, {\n    key: 'chooseCountryByCountryCallingCode',\n    value: function chooseCountryByCountryCallingCode(country_calling_code) {\n      var country = this.countryCallingCodes()[country_calling_code][0]; // Do not want to test this case.\n      // (custom metadata, not all countries).\n\n      /* istanbul ignore else */\n\n      if (this.hasCountry(country)) {\n        this.country(country);\n      }\n    }\n  }, {\n    key: 'selectedCountry',\n    value: function selectedCountry() {\n      return this._country;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: 'pattern',\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: 'format',\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: 'leadingDigitsPatterns',\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: 'nationalPrefixFormattingRule',\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: 'nationalPrefixIsOptionalWhenFormatting',\n    value: function nationalPrefixIsOptionalWhenFormatting() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n    }\n  }, {\n    key: 'nationalPrefixIsMandatoryWhenFormatting',\n    value: function nationalPrefixIsMandatoryWhenFormatting() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: 'usesNationalPrefix',\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a dummy one.\n      this.nationalPrefixFormattingRule() !== '$1' && // Check that national prefix formatting rule actually has national prefix digit(s).\n      /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n    }\n  }, {\n    key: 'internationalFormat',\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n\nvar Type = function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: 'pattern',\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: 'possibleLengths',\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n    throw new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error('Unknown country: ' + country);\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n  var pa = a.split('.');\n  var pb = b.split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  return 0;\n}\n;"],"sourceRoot":""}